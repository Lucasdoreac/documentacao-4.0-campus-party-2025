#!/usr/bin/env python3
"""
Documenta√ß√£o 4.0 - Sistema Completo (LocalFirst)
Campus Party 2025 - Lucas D√≥rea Cardoso e Aulus Diniz

Este script implementa um sistema completo de Documenta√ß√£o 4.0 com abordagem LocalFirst,
incluindo consulta ag√™ntica, gera√ß√£o de documenta√ß√£o, agente de manuten√ß√£o e
integra√ß√£o com CI/CD, tudo em um √∫nico arquivo para facilitar o uso e distribui√ß√£o.
"""

import os
import sys
import json
import time
import argparse
import subprocess
import threading
import logging
import re
import shutil
from datetime import datetime
from pathlib import Path
import http.server
import socketserver
import webbrowser
from typing import Dict, List, Optional, Tuple, Union, Any

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('doc40.log')
    ]
)
logger = logging.getLogger('doc40')

# Cores para terminal
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

# Vers√£o do script
VERSION = "1.0.0"

class ClaudeCodeIntegration:
    """Classe para integra√ß√£o com Claude Code CLI."""
    
    def __init__(self, config: Dict[str, Any] = None):
        """
        Inicializa a integra√ß√£o com Claude Code.
        
        Args:
            config: Configura√ß√£o opcional
        """
        self.config = config or {}
        self.check_installation()
        
    def check_installation(self) -> bool:
        """
        Verifica se o Claude Code CLI est√° instalado.
        
        Returns:
            bool: True se estiver instalado, False caso contr√°rio
        """
        try:
            result = subprocess.run(
                ["claude-code", "--version"], 
                capture_output=True, 
                text=True
            )
            if result.returncode == 0:
                version = result.stdout.strip()
                logger.info(f"Claude Code instalado: {version}")
                return True
            else:
                logger.warning("Claude Code instalado, mas n√£o foi poss√≠vel obter a vers√£o")
                return True
        except Exception as e:
            logger.error(f"Claude Code n√£o est√° instalado ou n√£o est√° no PATH: {e}")
            print(f"\n{Colors.RED}Claude Code CLI n√£o encontrado. Por favor, instale:"+
                  f"\n\ncurl -sSL https://raw.githubusercontent.com/anthropic/claude-code/main/install.sh | bash{Colors.ENDC}\n")
            return False
            
    def check_api_key(self) -> bool:
        """
        Verifica se a API key est√° configurada.
        
        Returns:
            bool: True se a API key estiver configurada, False caso contr√°rio
        """
        try:
            result = subprocess.run(
                ["claude-code", "config", "get", "api_key"], 
                capture_output=True, 
                text=True
            )
            if result.returncode == 0 and "api_key" in result.stdout:
                logger.info("API key configurada corretamente")
                return True
            else:
                logger.warning("API key n√£o est√° configurada")
                print(f"\n{Colors.YELLOW}API key n√£o configurada. Por favor, configure:"+
                      f"\n\nclaude-code config set api_key sk_ant_your_key_here{Colors.ENDC}\n")
                return False
        except Exception as e:
            logger.error(f"Erro ao verificar API key: {e}")
            return False
    
    def query(self, question: str, directory: str, cache: bool = True) -> Dict[str, Any]:
        """
        Consulta o c√≥digo usando Claude Code.
        
        Args:
            question: A pergunta a ser feita
            directory: O diret√≥rio do projeto
            cache: Se deve usar cache (padr√£o: True)
            
        Returns:
            dict: A resposta processada
        """
        logger.info(f"Consultando: {question}")
        print(f"\n{Colors.BLUE}üìù Consultando: {question}{Colors.ENDC}")
        
        # Criar diret√≥rio de cache se n√£o existir e cache estiver ativado
        cache_dir = os.path.join(directory, ".doc40", "cache", "queries")
        cache_file = None
        
        if cache:
            os.makedirs(cache_dir, exist_ok=True)
            # Hash da pergunta para nome do arquivo de cache
            import hashlib
            question_hash = hashlib.md5(question.encode()).hexdigest()
            cache_file = os.path.join(cache_dir, f"{question_hash}.json")
            
            # Verificar se existe cache v√°lido (menos de 24h)
            if os.path.exists(cache_file):
                file_time = os.path.getmtime(cache_file)
                if time.time() - file_time < 86400:  # 24 horas
                    try:
                        with open(cache_file, 'r') as f:
                            response = json.load(f)
                        logger.info(f"Usando resposta em cache para: {question}")
                        print(f"{Colors.GREEN}‚úì Usando resposta em cache{Colors.ENDC}")
                        return response
                    except Exception as e:
                        logger.error(f"Erro ao ler cache: {e}")
        
        # Comando para o Claude Code CLI
        command = [
            "claude-code",
            "query",
            "--directory", directory,
            "--query", question,
            "--output", "json"
        ]
        
        # Executar o comando
        try:
            result = subprocess.run(command, capture_output=True, text=True)
            
            # Processar a resposta
            if result.returncode == 0:
                try:
                    response = json.loads(result.stdout)
                    
                    # Salvar no cache se ativado
                    if cache and cache_file:
                        with open(cache_file, 'w') as f:
                            json.dump(response, f)
                    
                    return response
                except json.JSONDecodeError as e:
                    logger.error(f"Erro ao processar resposta JSON: {e}")
                    print(f"{Colors.RED}‚ùå Erro ao processar a resposta{Colors.ENDC}")
                    return {"error": "JSONDecodeError", "message": str(e)}
            else:
                logger.error(f"Erro ao executar consulta: {result.stderr}")
                print(f"{Colors.RED}‚ùå Erro: {result.stderr}{Colors.ENDC}")
                return {"error": "CommandError", "message": result.stderr}
        except Exception as e:
            logger.error(f"Exce√ß√£o ao executar consulta: {e}")
            print(f"{Colors.RED}‚ùå Exce√ß√£o: {str(e)}{Colors.ENDC}")
            return {"error": "Exception", "message": str(e)}
    
    def generate_documentation(self, directory: str, format: str = "markdown", 
                              output_dir: str = "docs") -> Dict[str, Any]:
        """
        Gera documenta√ß√£o automaticamente a partir do c√≥digo.
        
        Args:
            directory: O diret√≥rio do projeto
            format: O formato da documenta√ß√£o (markdown, html)
            output_dir: O diret√≥rio de sa√≠da
            
        Returns:
            dict: Resultado da opera√ß√£o
        """
        logger.info(f"Gerando documenta√ß√£o para: {directory}")
        print(f"\n{Colors.BLUE}üöÄ Gerando documenta√ß√£o para: {directory}{Colors.ENDC}")
        print(f"{Colors.BLUE}üìÑ Formato: {format}{Colors.ENDC}")
        
        # Criar diret√≥rio de sa√≠da se n√£o existir
        os.makedirs(output_dir, exist_ok=True)
        
        # Comando para o Claude Code CLI
        command = [
            "claude-code",
            "document",
            "--directory", directory,
            "--format", format,
            "--output-dir", output_dir
        ]
        
        # Executar o comando
        try:
            result = subprocess.run(command, capture_output=True, text=True)
            
            if result.returncode == 0:
                logger.info(f"Documenta√ß√£o gerada com sucesso em: {output_dir}")
                print(f"{Colors.GREEN}‚úÖ Documenta√ß√£o gerada com sucesso em: {output_dir}{Colors.ENDC}")
                
                # Registrar a gera√ß√£o
                self._log_documentation_update(output_dir, "Gera√ß√£o inicial")
                
                return {
                    "success": True, 
                    "output_dir": output_dir,
                    "format": format
                }
            else:
                logger.error(f"Erro ao gerar documenta√ß√£o: {result.stderr}")
                print(f"{Colors.RED}‚ùå Erro: {result.stderr}{Colors.ENDC}")
                return {
                    "success": False, 
                    "error": result.stderr
                }
        except Exception as e:
            logger.error(f"Exce√ß√£o ao gerar documenta√ß√£o: {e}")
            print(f"{Colors.RED}‚ùå Exce√ß√£o: {str(e)}{Colors.ENDC}")
            return {
                "success": False, 
                "error": str(e)
            }
    
    def update_documentation(self, directory: str, commit_id: str, 
                           output_dir: str = "docs") -> Dict[str, Any]:
        """
        Atualiza a documenta√ß√£o com base nas mudan√ßas do commit.
        
        Args:
            directory: O diret√≥rio do projeto
            commit_id: O ID do commit
            output_dir: O diret√≥rio de sa√≠da
            
        Returns:
            dict: Resultado da opera√ß√£o
        """
        logger.info(f"Atualizando documenta√ß√£o para commit: {commit_id[:8] if commit_id else 'N/A'}")
        print(f"\n{Colors.BLUE}üîÑ Atualizando documenta√ß√£o para commit: {commit_id[:8] if commit_id else 'N/A'}{Colors.ENDC}")
        
        # Criar diret√≥rio de sa√≠da se n√£o existir
        os.makedirs(output_dir, exist_ok=True)
        
        # Comando para o Claude Code CLI
        command = [
            "claude-code",
            "update-docs",
            "--directory", directory,
            "--commit", commit_id,
            "--output-dir", output_dir
        ]
        
        # Executar o comando
        try:
            result = subprocess.run(command, capture_output=True, text=True)
            
            if result.returncode == 0:
                logger.info(f"Documenta√ß√£o atualizada com sucesso em: {output_dir}")
                print(f"{Colors.GREEN}‚úÖ Documenta√ß√£o atualizada com sucesso em: {output_dir}{Colors.ENDC}")
                
                # Registrar a atualiza√ß√£o
                self._log_documentation_update(output_dir, f"Atualiza√ß√£o para commit {commit_id[:8]}")
                
                return {
                    "success": True, 
                    "output_dir": output_dir,
                    "commit_id": commit_id
                }
            else:
                logger.error(f"Erro ao atualizar documenta√ß√£o: {result.stderr}")
                print(f"{Colors.RED}‚ùå Erro: {result.stderr}{Colors.ENDC}")
                return {
                    "success": False, 
                    "error": result.stderr
                }
        except Exception as e:
            logger.error(f"Exce√ß√£o ao atualizar documenta√ß√£o: {e}")
            print(f"{Colors.RED}‚ùå Exce√ß√£o: {str(e)}{Colors.ENDC}")
            return {
                "success": False, 
                "error": str(e)
            }
    
    def generate_code_with_docs(self, prompt: str, output_file: str, language: str = "python") -> Dict[str, Any]:
        """
        Gera c√≥digo com documenta√ß√£o integrada.
        
        Args:
            prompt: O prompt para gera√ß√£o
            output_file: O arquivo de sa√≠da
            language: A linguagem de programa√ß√£o
            
        Returns:
            dict: Resultado da opera√ß√£o
        """
        logger.info(f"Gerando c√≥digo para: {prompt}")
        print(f"\n{Colors.BLUE}üß† Gerando c√≥digo com documenta√ß√£o para: {prompt}{Colors.ENDC}")
        
        # Criar diret√≥rio de sa√≠da se n√£o existir
        os.makedirs(os.path.dirname(os.path.abspath(output_file)), exist_ok=True)
        
        # Adicionar contexto sobre documenta√ß√£o SOTA ao prompt
        enhanced_prompt = f"""
        {prompt}
        
        IMPORTANTE:
        1. O c√≥digo deve seguir as melhores pr√°ticas de Documenta√ß√£o 4.0, incluindo:
           - Docstrings completos para classes, m√©todos e fun√ß√µes
           - Anota√ß√µes de tipo (type hints) para todos os par√¢metros e retornos
           - Exemplos de uso embutidos na documenta√ß√£o
           - Explica√ß√µes claras do prop√≥sito e comportamento
        2. O c√≥digo deve ser bem estruturado e seguir princ√≠pios SOLID
        3. Inclua valida√ß√£o robusta de entradas e tratamento de erros
        4. A linguagem √© {language}
        """
        
        # Comando para o Claude Code CLI
        command = [
            "claude-code",
            "generate",
            "--prompt", enhanced_prompt,
            "--output", output_file
        ]
        
        # Executar o comando
        try:
            result = subprocess.run(command, capture_output=True, text=True)
            
            if result.returncode == 0:
                logger.info(f"C√≥digo gerado com sucesso em: {output_file}")
                print(f"{Colors.GREEN}‚úÖ C√≥digo gerado com sucesso em: {output_file}{Colors.ENDC}")
                
                # Ler o arquivo gerado para retornar seu conte√∫do
                with open(output_file, 'r') as f:
                    content = f.read()
                
                return {
                    "success": True, 
                    "output_file": output_file,
                    "content": content
                }
            else:
                logger.error(f"Erro ao gerar c√≥digo: {result.stderr}")
                print(f"{Colors.RED}‚ùå Erro: {result.stderr}{Colors.ENDC}")
                return {
                    "success": False, 
                    "error": result.stderr
                }
        except Exception as e:
            logger.error(f"Exce√ß√£o ao gerar c√≥digo: {e}")
            print(f"{Colors.RED}‚ùå Exce√ß√£o: {str(e)}{Colors.ENDC}")
            return {
                "success": False, 
                "error": str(e)
            }
    
    def _log_documentation_update(self, output_dir: str, description: str) -> None:
        """
        Registra uma atualiza√ß√£o de documenta√ß√£o no log.
        
        Args:
            output_dir: O diret√≥rio de sa√≠da
            description: Descri√ß√£o da atualiza√ß√£o
        """
        log_file = os.path.join(output_dir, "updates.log")
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        with open(log_file, 'a') as f:
            f.write(f"{timestamp} - {description}\n")


class GitIntegration:
    """Classe para integra√ß√£o com Git."""
    
    def __init__(self, directory: str):
        """
        Inicializa a integra√ß√£o com Git.
        
        Args:
            directory: O diret√≥rio do reposit√≥rio Git
        """
        self.directory = directory
        self.is_git_repo = self._check_git_repo()
    
    def _check_git_repo(self) -> bool:
        """
        Verifica se o diret√≥rio √© um reposit√≥rio Git.
        
        Returns:
            bool: True se for um reposit√≥rio Git, False caso contr√°rio
        """
        try:
            os.chdir(self.directory)
            result = subprocess.run(
                ["git", "rev-parse", "--is-inside-work-tree"], 
                capture_output=True, 
                text=True
            )
            return result.returncode == 0 and result.stdout.strip() == "true"
        except Exception as e:
            logger.error(f"Erro ao verificar reposit√≥rio Git: {e}")
            return False
    
    def get_current_commit(self) -> Optional[str]:
        """
        Obt√©m o commit atual.
        
        Returns:
            str: O ID do commit atual ou None se ocorrer um erro
        """
        if not self.is_git_repo:
            logger.warning(f"O diret√≥rio {self.directory} n√£o √© um reposit√≥rio Git")
            return None
        
        try:
            os.chdir(self.directory)
            result = subprocess.run(
                ["git", "rev-parse", "HEAD"], 
                capture_output=True, 
                text=True
            )
            
            if result.returncode == 0:
                return result.stdout.strip()
            else:
                logger.error(f"Erro ao obter commit atual: {result.stderr}")
                return None
        except Exception as e:
            logger.error(f"Exce√ß√£o ao obter commit atual: {e}")
            return None
    
    def get_changed_files(self, from_commit: str, to_commit: str = "HEAD") -> List[str]:
        """
        Obt√©m os arquivos alterados entre dois commits.
        
        Args:
            from_commit: O commit de origem
            to_commit: O commit de destino (padr√£o: HEAD)
            
        Returns:
            list: Lista de arquivos alterados
        """
        if not self.is_git_repo:
            logger.warning(f"O diret√≥rio {self.directory} n√£o √© um reposit√≥rio Git")
            return []
        
        try:
            os.chdir(self.directory)
            result = subprocess.run(
                ["git", "diff", "--name-only", from_commit, to_commit], 
                capture_output=True, 
                text=True
            )
            
            if result.returncode == 0:
                return [f.strip() for f in result.stdout.splitlines() if f.strip()]
            else:
                logger.error(f"Erro ao obter arquivos alterados: {result.stderr}")
                return []
        except Exception as e:
            logger.error(f"Exce√ß√£o ao obter arquivos alterados: {e}")
            return []
    
    def get_commit_message(self, commit_id: str = "HEAD") -> Optional[str]:
        """
        Obt√©m a mensagem de um commit.
        
        Args:
            commit_id: O ID do commit (padr√£o: HEAD)
            
        Returns:
            str: A mensagem do commit ou None se ocorrer um erro
        """
        if not self.is_git_repo:
            logger.warning(f"O diret√≥rio {self.directory} n√£o √© um reposit√≥rio Git")
            return None
        
        try:
            os.chdir(self.directory)
            result = subprocess.run(
                ["git", "log", "-1", "--pretty=%B", commit_id], 
                capture_output=True, 
                text=True
            )
            
            if result.returncode == 0:
                return result.stdout.strip()
            else:
                logger.error(f"Erro ao obter mensagem do commit: {result.stderr}")
                return None
        except Exception as e:
            logger.error(f"Exce√ß√£o ao obter mensagem do commit: {e}")
            return None
    
    def setup_git_hooks(self, hooks_dir: str = None) -> bool:
        """
        Configura hooks Git para integra√ß√£o com o sistema de documenta√ß√£o.
        
        Args:
            hooks_dir: Diret√≥rio para os hooks
            
        Returns:
            bool: True se os hooks foram configurados com sucesso, False caso contr√°rio
        """
        if not self.is_git_repo:
            logger.warning(f"O diret√≥rio {self.directory} n√£o √© um reposit√≥rio Git")
            return False
        
        try:
            os.chdir(self.directory)
            git_hooks_dir = os.path.join(self.directory, ".git", "hooks")
            
            # Conte√∫do do hook post-commit
            post_commit_hook = """#!/bin/bash
# Documenta√ß√£o 4.0 - Post-Commit Hook
# Este hook √© executado ap√≥s cada commit para atualizar a documenta√ß√£o

# Caminho para o script doc40-completo.py
DOC40_SCRIPT="$(git rev-parse --show-toplevel)/doc40-completo.py"

if [ -f "$DOC40_SCRIPT" ]; then
    echo "Atualizando documenta√ß√£o ap√≥s commit..."
    python3 "$DOC40_SCRIPT" update-docs
else
    echo "Script doc40-completo.py n√£o encontrado em $DOC40_SCRIPT"
    exit 1
fi
"""
            
            # Gravar o hook
            post_commit_path = os.path.join(git_hooks_dir, "post-commit")
            with open(post_commit_path, 'w') as f:
                f.write(post_commit_hook)
            
            # Tornar o hook execut√°vel
            os.chmod(post_commit_path, 0o755)
            
            logger.info(f"Hooks Git configurados com sucesso em {git_hooks_dir}")
            print(f"{Colors.GREEN}‚úÖ Hooks Git configurados com sucesso{Colors.ENDC}")
            return True
        except Exception as e:
            logger.error(f"Erro ao configurar hooks Git: {e}")
            print(f"{Colors.RED}‚ùå Erro ao configurar hooks Git: {e}{Colors.ENDC}")
            return False


class DocumentationServer:
    """Servidor HTTP simples para visualizar a documenta√ß√£o gerada."""
    
    def __init__(self, docs_dir: str, port: int = 8000):
        """
        Inicializa o servidor de documenta√ß√£o.
        
        Args:
            docs_dir: O diret√≥rio da documenta√ß√£o
            port: A porta para o servidor (padr√£o: 8000)
        """
        self.docs_dir = docs_dir
        self.port = port
        self.server = None
        self.server_thread = None
    
    def start(self) -> bool:
        """
        Inicia o servidor HTTP.
        
        Returns:
            bool: True se o servidor iniciou com sucesso, False caso contr√°rio
        """
        try:
            os.chdir(self.docs_dir)
            
            # Criar um arquivo index.html se n√£o existir
            index_path = os.path.join(self.docs_dir, "index.html")
            if not os.path.exists(index_path):
                self._create_index_html()
            
            # Iniciar o servidor em uma thread separada
            handler = http.server.SimpleHTTPRequestHandler
            self.server = socketserver.TCPServer(("", self.port), handler)
            
            self.server_thread = threading.Thread(target=self.server.serve_forever)
            self.server_thread.daemon = True
            self.server_thread.start()
            
            logger.info(f"Servidor iniciado em http://localhost:{self.port}")
            print(f"{Colors.GREEN}‚úÖ Servidor iniciado em http://localhost:{self.port}{Colors.ENDC}")
            
            # Abrir o navegador
            webbrowser.open(f"http://localhost:{self.port}")
            
            return True
        except Exception as e:
            logger.error(f"Erro ao iniciar servidor: {e}")
            print(f"{Colors.RED}‚ùå Erro ao iniciar servidor: {e}{Colors.ENDC}")
            return False
    
    def stop(self) -> bool:
        """
        Para o servidor HTTP.
        
        Returns:
            bool: True se o servidor parou com sucesso, False caso contr√°rio
        """
        try:
            if self.server:
                self.server.shutdown()
                self.server.server_close()
                logger.info("Servidor parado")
                print(f"{Colors.YELLOW}‚ÑπÔ∏è Servidor parado{Colors.ENDC}")
                return True
            return False
        except Exception as e:
            logger.error(f"Erro ao parar servidor: {e}")
            print(f"{Colors.RED}‚ùå Erro ao parar servidor: {e}{Colors.ENDC}")
            return False
    
    def _create_index_html(self) -> None:
        """Cria um arquivo index.html para navegar pela documenta√ß√£o."""
        
        # Listar arquivos de documenta√ß√£o
        md_files = [f for f in os.listdir(self.docs_dir) if f.endswith('.md')]
        html_files = [f for f in os.listdir(self.docs_dir) if f.endswith('.html') and f != "index.html"]
        other_files = [f for f in os.listdir(self.docs_dir) if not f.endswith(('.md', '.html', '.log'))]
        
        # Criar HTML
        html_content = """<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Documenta√ß√£o 4.0</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f4f5f7;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        h1 {
            color: #2a67c2;
            border-bottom: 2px solid #eaecef;
            padding-bottom: 10px;
        }
        h2 {
            color: #2a67c2;
            margin-top: 20px;
        }
        ul {
            list-style-type: none;
            padding: 0;
        }
        li {
            margin-bottom: 10px;
            padding: 5px 10px;
            background-color: #f6f8fa;
            border-radius: 3px;
        }
        a {
            color: #2a67c2;
            text-decoration: none;
        }
        a:hover {
            text-decoration: underline;
        }
        footer {
            margin-top: 30px;
            font-size: 0.8em;
            color: #6a737d;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Documenta√ß√£o 4.0</h1>
        <p>Documenta√ß√£o gerada automaticamente pelo sistema Documenta√ß√£o 4.0.</p>
"""
        
        # Adicionar se√ß√£o de arquivos Markdown
        if md_files:
            html_content += """
        <h2>Documenta√ß√£o Markdown</h2>
        <ul>
"""
            for file in md_files:
                html_content += f'            <li><a href="{file}">{file}</a></li>\n'
            html_content += "        </ul>\n"
        
        # Adicionar se√ß√£o de arquivos HTML
        if html_files:
            html_content += """
        <h2>Documenta√ß√£o HTML</h2>
        <ul>
"""
            for file in html_files:
                html_content += f'            <li><a href="{file}">{file}</a></li>\n'
            html_content += "        </ul>\n"
        
        # Adicionar se√ß√£o de outros arquivos
        if other_files:
            html_content += """
        <h2>Outros Arquivos</h2>
        <ul>
"""
            for file in other_files:
                html_content += f'            <li><a href="{file}">{file}</a></li>\n'
            html_content += "        </ul>\n"
        
        # Adicionar rodap√©
        html_content += """
        <footer>
            <p>Gerado por Documenta√ß√£o 4.0 - Campus Party 2025</p>
        </footer>
    </div>
</body>
</html>
"""
        
        # Salvar o arquivo
        with open(os.path.join(self.docs_dir, "index.html"), 'w') as f:
            f.write(html_content)


class DocumentationAgent:
    """Agente de monitoramento e manuten√ß√£o de documenta√ß√£o."""
    
    def __init__(self, directory: str, output_dir: str = "docs", 
                 interval: int = 300, claude: ClaudeCodeIntegration = None):
        """
        Inicializa o agente de documenta√ß√£o.
        
        Args:
            directory: O diret√≥rio do projeto
            output_dir: O diret√≥rio de sa√≠da
            interval: O intervalo de verifica√ß√£o em segundos
            claude: Inst√¢ncia de ClaudeCodeIntegration
        """
        self.directory = directory
        self.output_dir = output_dir
        self.interval = interval
        self.claude = claude or ClaudeCodeIntegration()
        self.git = GitIntegration(directory)
        self.running = False
        self.agent_thread = None
        self.last_commit = self.git.get_current_commit()
    
    def start(self) -> bool:
        """
        Inicia o agente de documenta√ß√£o.
        
        Returns:
            bool: True se o agente iniciou com sucesso, False caso contr√°rio
        """
        if not self.git.is_git_repo:
            logger.error(f"O diret√≥rio {self.directory} n√£o √© um reposit√≥rio Git")
            print(f"{Colors.RED}‚ùå O diret√≥rio {self.directory} n√£o √© um reposit√≥rio Git{Colors.ENDC}")
            return False
        
        if self.running:
            logger.warning("O agente j√° est√° em execu√ß√£o")
            print(f"{Colors.YELLOW}‚ö†Ô∏è O agente j√° est√° em execu√ß√£o{Colors.ENDC}")
            return False
        
        self.running = True
        self.agent_thread = threading.Thread(target=self._run)
        self.agent_thread.daemon = True
        self.agent_thread.start()
        
        logger.info(f"Agente iniciado com intervalo de {self.interval} segundos")
        print(f"{Colors.GREEN}‚úÖ Agente iniciado com intervalo de {self.interval} segundos{Colors.ENDC}")
        
        return True
    
    def stop(self) -> bool:
        """
        Para o agente de documenta√ß√£o.
        
        Returns:
            bool: True se o agente parou com sucesso, False caso contr√°rio
        """
        if not self.running:
            logger.warning("O agente n√£o est√° em execu√ß√£o")
            print(f"{Colors.YELLOW}‚ö†Ô∏è O agente n√£o est√° em execu√ß√£o{Colors.ENDC}")
            return False
        
        self.running = False
        self.agent_thread.join(timeout=2.0)
        
        logger.info("Agente parado")
        print(f"{Colors.YELLOW}‚ÑπÔ∏è Agente parado{Colors.ENDC}")
        
        return True
    
    def _run(self) -> None:
        """Loop principal do agente."""
        while self.running:
            try:
                # Obter o commit atual
                current_commit = self.git.get_current_commit()
                
                # Se houve mudan√ßa no commit
                if current_commit and current_commit != self.last_commit:
                    logger.info(f"Detectada mudan√ßa de commit: {self.last_commit[:8] if self.last_commit else 'Nenhum'} -> {current_commit[:8]}")
                    print(f"{Colors.BLUE}üîç Detectada mudan√ßa de commit: {self.last_commit[:8] if self.last_commit else 'Nenhum'} -> {current_commit[:8]}{Colors.ENDC}")
                    
                    # Obter arquivos alterados
                    changed_files = self.git.get_changed_files(
                        self.last_commit if self.last_commit else current_commit + "^", 
                        current_commit
                    )
                    
                    # Obter mensagem do commit
                    commit_message = self.git.get_commit_message(current_commit)
                    
                    print(f"{Colors.BLUE}üìÑ Arquivos alterados: {len(changed_files)}{Colors.ENDC}")
                    print(f"{Colors.BLUE}üìù Mensagem do commit: {commit_message}{Colors.ENDC}")
                    
                    # Atualizar a documenta√ß√£o
                    self.claude.update_documentation(
                        self.directory, 
                        current_commit,
                        self.output_dir
                    )
                    
                    # Atualizar o √∫ltimo commit
                    self.last_commit = current_commit
                
                # Aguardar o pr√≥ximo ciclo
                for _ in range(self.interval):
                    if not self.running:
                        break
                    time.sleep(1)
            
            except Exception as e:
                logger.error(f"Erro no agente: {e}")
                print(f"{Colors.RED}‚ùå Erro no agente: {e}{Colors.ENDC}")
                time.sleep(10)  # Esperar um pouco antes de tentar novamente


class DocumentationSystem:
    """Sistema completo de Documenta√ß√£o 4.0."""
    
    def __init__(self, config: Dict[str, Any] = None):
        """
        Inicializa o sistema de documenta√ß√£o.
        
        Args:
            config: Configura√ß√£o opcional
        """
        self.config = config or {}
        self.directory = self.config.get('directory', os.getcwd())
        self.output_dir = self.config.get('output_dir', os.path.join(self.directory, "docs"))
        self.interval = self.config.get('interval', 300)
        self.format = self.config.get('format', "markdown")
        self.port = self.config.get('port', 8000)
        
        # Criar diret√≥rio de sa√≠da se n√£o existir
        os.makedirs(self.output_dir, exist_ok=True)
        
        # Componentes do sistema
        self.claude = ClaudeCodeIntegration(self.config)
        self.git = GitIntegration(self.directory)
        self.agent = DocumentationAgent(
            self.directory, 
            self.output_dir,
            self.interval,
            self.claude
        )
        self.server = DocumentationServer(self.output_dir, self.port)
    
    def check_environment(self) -> Dict[str, bool]:
        """
        Verifica o ambiente de execu√ß√£o.
        
        Returns:
            dict: Resultado das verifica√ß√µes
        """
        logger.info("Verificando ambiente de execu√ß√£o")
        print(f"\n{Colors.BLUE}üîç Verificando ambiente de execu√ß√£o{Colors.ENDC}")
        
        results = {
            "claude_code_installed": self.claude.check_installation(),
            "api_key_configured": self.claude.check_api_key(),
            "is_git_repo": self.git.is_git_repo
        }
        
        if all(results.values()):
            print(f"{Colors.GREEN}‚úÖ Ambiente configurado corretamente{Colors.ENDC}")
        else:
            print(f"{Colors.YELLOW}‚ö†Ô∏è Algumas verifica√ß√µes falharam. Consulte os logs para mais detalhes.{Colors.ENDC}")
        
        return results
    
    def generate_initial_documentation(self) -> Dict[str, Any]:
        """
        Gera a documenta√ß√£o inicial.
        
        Returns:
            dict: Resultado da opera√ß√£o
        """
        logger.info(f"Gerando documenta√ß√£o inicial para {self.directory}")
        print(f"\n{Colors.BLUE}üöÄ Gerando documenta√ß√£o inicial para {self.directory}{Colors.ENDC}")
        
        result = self.claude.generate_documentation(
            self.directory,
            self.format,
            self.output_dir
        )
        
        return result
    
    def start_agent(self) -> bool:
        """
        Inicia o agente de manuten√ß√£o.
        
        Returns:
            bool: True se o agente iniciou com sucesso, False caso contr√°rio
        """
        return self.agent.start()
    
    def stop_agent(self) -> bool:
        """
        Para o agente de manuten√ß√£o.
        
        Returns:
            bool: True se o agente parou com sucesso, False caso contr√°rio
        """
        return self.agent.stop()
    
    def start_server(self) -> bool:
        """
        Inicia o servidor de documenta√ß√£o.
        
        Returns:
            bool: True se o servidor iniciou com sucesso, False caso contr√°rio
        """
        return self.server.start()
    
    def stop_server(self) -> bool:
        """
        Para o servidor de documenta√ß√£o.
        
        Returns:
            bool: True se o servidor parou com sucesso, False caso contr√°rio
        """
        return self.server.stop()
    
    def setup_git_hooks(self) -> bool:
        """
        Configura hooks Git.
        
        Returns:
            bool: True se os hooks foram configurados com sucesso, False caso contr√°rio
        """
        return self.git.setup_git_hooks()
    
    def generate_code(self, prompt: str, output_file: str, language: str = "python") -> Dict[str, Any]:
        """
        Gera c√≥digo com documenta√ß√£o integrada.
        
        Args:
            prompt: O prompt para gera√ß√£o
            output_file: O arquivo de sa√≠da
            language: A linguagem de programa√ß√£o
            
        Returns:
            dict: Resultado da opera√ß√£o
        """
        return self.claude.generate_code_with_docs(prompt, output_file, language)
    
    def search_documentation(self, query: str) -> Dict[str, Any]:
        """
        Pesquisa na documenta√ß√£o.
        
        Args:
            query: A consulta de pesquisa
            
        Returns:
            dict: Resultado da pesquisa
        """
        return self.claude.query(query, self.directory)
    
    def shutdown(self) -> None:
        """Encerra todos os componentes do sistema."""
        logger.info("Encerrando sistema de documenta√ß√£o")
        print(f"\n{Colors.YELLOW}üõë Encerrando sistema de documenta√ß√£o{Colors.ENDC}")
        
        self.stop_agent()
        self.stop_server()


def print_welcome():
    """Exibe mensagem de boas-vindas."""
    print(f"""
{Colors.BLUE}{Colors.BOLD}======================================================{Colors.ENDC}
{Colors.BLUE}{Colors.BOLD}    Documenta√ß√£o 4.0 - Sistema Completo v{VERSION}{Colors.ENDC}
{Colors.BLUE}{Colors.BOLD}    Campus Party 2025 - Lucas D√≥rea Cardoso e Aulus Diniz{Colors.ENDC}
{Colors.BLUE}{Colors.BOLD}======================================================{Colors.ENDC}

Este script implementa um sistema completo de Documenta√ß√£o 4.0,
incluindo consulta ag√™ntica, gera√ß√£o de documenta√ß√£o, agente de 
manuten√ß√£o e integra√ß√£o com CI/CD.

{Colors.YELLOW}Para ajuda:{Colors.ENDC} python doc40-completo.py --help
""")


def print_help():
    """Exibe ajuda detalhada."""
    print(f"""
{Colors.BLUE}{Colors.BOLD}DOCUMENTA√á√ÉO 4.0 - AJUDA DETALHADA{Colors.ENDC}

{Colors.YELLOW}Comandos dispon√≠veis:{Colors.ENDC}

  {Colors.GREEN}init{Colors.ENDC}                  Inicializa o sistema e gera documenta√ß√£o inicial
    --dir DIR               Diret√≥rio do projeto (padr√£o: diret√≥rio atual)
    --output OUTPUT         Diret√≥rio de sa√≠da (padr√£o: ./docs)
    --format FORMAT         Formato da documenta√ß√£o (markdown, html)
    
  {Colors.GREEN}start-agent{Colors.ENDC}           Inicia o agente de manuten√ß√£o de documenta√ß√£o
    --dir DIR               Diret√≥rio do projeto (padr√£o: diret√≥rio atual)
    --output OUTPUT         Diret√≥rio de sa√≠da (padr√£o: ./docs)
    --interval INTERVAL     Intervalo de verifica√ß√£o em segundos (padr√£o: 300)
    
  {Colors.GREEN}stop-agent{Colors.ENDC}            Para o agente de manuten√ß√£o de documenta√ß√£o
    
  {Colors.GREEN}start-server{Colors.ENDC}          Inicia o servidor para visualizar a documenta√ß√£o
    --output OUTPUT         Diret√≥rio da documenta√ß√£o (padr√£o: ./docs)
    --port PORT             Porta do servidor (padr√£o: 8000)
    
  {Colors.GREEN}stop-server{Colors.ENDC}           Para o servidor de documenta√ß√£o
    
  {Colors.GREEN}update-docs{Colors.ENDC}           Atualiza a documenta√ß√£o manualmente
    --dir DIR               Diret√≥rio do projeto (padr√£o: diret√≥rio atual)
    --output OUTPUT         Diret√≥rio de sa√≠da (padr√£o: ./docs)
    
  {Colors.GREEN}setup-hooks{Colors.ENDC}           Configura hooks Git para atualiza√ß√£o autom√°tica
    --dir DIR               Diret√≥rio do projeto (padr√£o: diret√≥rio atual)
    
  {Colors.GREEN}generate-code{Colors.ENDC}         Gera c√≥digo com documenta√ß√£o integrada
    --prompt PROMPT         Prompt para gera√ß√£o de c√≥digo
    --output OUTPUT         Arquivo de sa√≠da
    --language LANGUAGE     Linguagem de programa√ß√£o (padr√£o: python)
    
  {Colors.GREEN}search{Colors.ENDC}                Pesquisa na documenta√ß√£o
    --query QUERY           Consulta de pesquisa
    --dir DIR               Diret√≥rio do projeto (padr√£o: diret√≥rio atual)

{Colors.YELLOW}Exemplos:{Colors.ENDC}

  # Inicializar o sistema e gerar documenta√ß√£o inicial
  python doc40-completo.py init --dir ./meu-projeto --output ./docs
  
  # Iniciar o agente de manuten√ß√£o
  python doc40-completo.py start-agent --interval 600
  
  # Iniciar o servidor de documenta√ß√£o
  python doc40-completo.py start-server --port 8080
  
  # Pesquisar na documenta√ß√£o
  python doc40-completo.py search --query "Como funciona a autentica√ß√£o?"
  
  # Gerar c√≥digo com documenta√ß√£o
  python doc40-completo.py generate-code --prompt "Crie uma classe para processamento de pagamentos" --output payment.py
""")


def parse_args():
    """
    Processa os argumentos de linha de comando.
    
    Returns:
        argparse.Namespace: Os argumentos processados
    """
    parser = argparse.ArgumentParser(
        description="Documenta√ß√£o 4.0 - Sistema Completo",
        add_help=False
    )
    
    # Argumentos gerais
    parser.add_argument('--help', '-h', action='store_true', 
                        help='Exibe ajuda detalhada')
    parser.add_argument('--version', '-v', action='store_true',
                        help='Exibe a vers√£o do script')
    
    # Subcomandos
    subparsers = parser.add_subparsers(dest='command')
    
    # Comando: init
    init_parser = subparsers.add_parser('init', 
                                        help='Inicializa o sistema e gera documenta√ß√£o inicial')
    init_parser.add_argument('--dir', default=os.getcwd(),
                            help='Diret√≥rio do projeto (padr√£o: diret√≥rio atual)')
    init_parser.add_argument('--output', default='docs',
                            help='Diret√≥rio de sa√≠da (padr√£o: ./docs)')
    init_parser.add_argument('--format', default='markdown', choices=['markdown', 'html'],
                            help='Formato da documenta√ß√£o (padr√£o: markdown)')
    
    # Comando: start-agent
    agent_parser = subparsers.add_parser('start-agent',
                                         help='Inicia o agente de manuten√ß√£o de documenta√ß√£o')
    agent_parser.add_argument('--dir', default=os.getcwd(),
                             help='Diret√≥rio do projeto (padr√£o: diret√≥rio atual)')
    agent_parser.add_argument('--output', default='docs',
                             help='Diret√≥rio de sa√≠da (padr√£o: ./docs)')
    agent_parser.add_argument('--interval', type=int, default=300,
                             help='Intervalo de verifica√ß√£o em segundos (padr√£o: 300)')
    
    # Comando: stop-agent
    subparsers.add_parser('stop-agent',
                          help='Para o agente de manuten√ß√£o de documenta√ß√£o')
    
    # Comando: start-server
    server_parser = subparsers.add_parser('start-server',
                                          help='Inicia o servidor para visualizar a documenta√ß√£o')
    server_parser.add_argument('--output', default='docs',
                              help='Diret√≥rio da documenta√ß√£o (padr√£o: ./docs)')
    server_parser.add_argument('--port', type=int, default=8000,
                              help='Porta do servidor (padr√£o: 8000)')
    
    # Comando: stop-server
    subparsers.add_parser('stop-server',
                          help='Para o servidor de documenta√ß√£o')
    
    # Comando: update-docs
    update_parser = subparsers.add_parser('update-docs',
                                          help='Atualiza a documenta√ß√£o manualmente')
    update_parser.add_argument('--dir', default=os.getcwd(),
                              help='Diret√≥rio do projeto (padr√£o: diret√≥rio atual)')
    update_parser.add_argument('--output', default='docs',
                              help='Diret√≥rio de sa√≠da (padr√£o: ./docs)')
    
    # Comando: setup-hooks
    hooks_parser = subparsers.add_parser('setup-hooks',
                                         help='Configura hooks Git para atualiza√ß√£o autom√°tica')
    hooks_parser.add_argument('--dir', default=os.getcwd(),
                             help='Diret√≥rio do projeto (padr√£o: diret√≥rio atual)')
    
    # Comando: generate-code
    generate_parser = subparsers.add_parser('generate-code',
                                            help='Gera c√≥digo com documenta√ß√£o integrada')
    generate_parser.add_argument('--prompt', required=True,
                                help='Prompt para gera√ß√£o de c√≥digo')
    generate_parser.add_argument('--output', required=True,
                                help='Arquivo de sa√≠da')
    generate_parser.add_argument('--language', default='python',
                                help='Linguagem de programa√ß√£o (padr√£o: python)')
    
    # Comando: search
    search_parser = subparsers.add_parser('search',
                                          help='Pesquisa na documenta√ß√£o')
    search_parser.add_argument('--query', required=True,
                              help='Consulta de pesquisa')
    search_parser.add_argument('--dir', default=os.getcwd(),
                              help='Diret√≥rio do projeto (padr√£o: diret√≥rio atual)')
    
    return parser.parse_args()


def main():
    """Fun√ß√£o principal."""
    args = parse_args()
    
    # Exibir vers√£o
    if args.version:
        print(f"Documenta√ß√£o 4.0 - Sistema Completo v{VERSION}")
        return 0
    
    # Exibir ajuda detalhada
    if args.help:
        print_help()
        return 0
    
    # Exibir mensagem de boas-vindas
    print_welcome()
    
    # Sistema global
    system = None
    
    try:
        # Processamento de comandos
        if args.command == 'init':
            # Configurar o sistema
            config = {
                'directory': args.dir,
                'output_dir': os.path.join(args.dir, args.output),
                'format': args.format
            }
            system = DocumentationSystem(config)
            
            # Verificar ambiente
            system.check_environment()
            
            # Gerar documenta√ß√£o inicial
            system.generate_initial_documentation()
            
            # Iniciar servidor automaticamente
            if system.start_server():
                print(f"{Colors.GREEN}‚úì Acesse a documenta√ß√£o em http://localhost:{system.port}{Colors.ENDC}")
            
            # Perguntar se deseja configurar hooks Git
            setup_hooks = input(f"\n{Colors.YELLOW}Deseja configurar hooks Git para atualiza√ß√£o autom√°tica? (s/N): {Colors.ENDC}")
            if setup_hooks.lower() == 's':
                system.setup_git_hooks()
            
            # Perguntar se deseja iniciar o agente
            start_agent = input(f"\n{Colors.YELLOW}Deseja iniciar o agente de manuten√ß√£o de documenta√ß√£o? (s/N): {Colors.ENDC}")
            if start_agent.lower() == 's':
                system.start_agent()
        
        elif args.command == 'start-agent':
            # Configurar o sistema
            config = {
                'directory': args.dir,
                'output_dir': os.path.join(args.dir, args.output),
                'interval': args.interval
            }
            system = DocumentationSystem(config)
            
            # Verificar ambiente
            system.check_environment()
            
            # Iniciar o agente
            system.start_agent()
        
        elif args.command == 'stop-agent':
            # Configurar o sistema
            system = DocumentationSystem()
            
            # Parar o agente
            system.stop_agent()
        
        elif args.command == 'start-server':
            # Configurar o sistema
            config = {
                'output_dir': args.output,
                'port': args.port
            }
            system = DocumentationSystem(config)
            
            # Iniciar o servidor
            if system.start_server():
                print(f"{Colors.GREEN}‚úì Acesse a documenta√ß√£o em http://localhost:{args.port}{Colors.ENDC}")
                
                # Manter o script em execu√ß√£o
                try:
                    while True:
                        time.sleep(1)
                except KeyboardInterrupt:
                    print(f"\n{Colors.YELLOW}Servidor interrompido pelo usu√°rio{Colors.ENDC}")
                    system.stop_server()
        
        elif args.command == 'stop-server':
            # Configurar o sistema
            system = DocumentationSystem()
            
            # Parar o servidor
            system.stop_server()
        
        elif args.command == 'update-docs':
            # Configurar o sistema
            config = {
                'directory': args.dir,
                'output_dir': os.path.join(args.dir, args.output)
            }
            system = DocumentationSystem(config)
            
            # Verificar ambiente
            system.check_environment()
            
            # Gerar documenta√ß√£o inicial
            system.generate_initial_documentation()
        
        elif args.command == 'setup-hooks':
            # Configurar o sistema
            config = {
                'directory': args.dir
            }
            system = DocumentationSystem(config)
            
            # Verificar ambiente
            system.check_environment()
            
            # Configurar hooks Git
            system.setup_git_hooks()
        
        elif args.command == 'generate-code':
            # Configurar o sistema
            system = DocumentationSystem()
            
            # Verificar ambiente
            system.check_environment()
            
            # Gerar c√≥digo
            result = system.generate_code(args.prompt, args.output, args.language)
            
            if result.get('success'):
                print(f"{Colors.GREEN}‚úì C√≥digo gerado com sucesso em {args.output}{Colors.ENDC}")
                
                # Exibir o come√ßo do c√≥digo gerado
                lines = result.get('content', '').split('\n')
                preview = '\n'.join(lines[:15])
                print(f"\n{Colors.BLUE}Primeiras linhas do c√≥digo gerado:{Colors.ENDC}")
                print(f"{preview}\n...")
        
        elif args.command == 'search':
            # Configurar o sistema
            config = {
                'directory': args.dir
            }
            system = DocumentationSystem(config)
            
            # Verificar ambiente
            system.check_environment()
            
            # Pesquisar na documenta√ß√£o
            result = system.search_documentation(args.query)
            
            if 'error' not in result:
                print(f"\n{Colors.GREEN}=== Resposta para: {args.query} ==={Colors.ENDC}")
                print(result.get("response", "Sem resposta"))
                print(f"\n{Colors.BLUE}Fontes:{Colors.ENDC}")
                for source in result.get("sources", []):
                    print(f"- {source.get('file')} (relev√¢ncia: {source.get('relevance', 'N/A')})")
        
        else:
            # Comando n√£o especificado, mostrar ajuda resumida
            print(f"{Colors.YELLOW}Nenhum comando especificado. Use --help para ver os comandos dispon√≠veis.{Colors.ENDC}")
            print("\nComandos b√°sicos:")
            print(f"  {Colors.GREEN}init{Colors.ENDC}           Inicializa o sistema e gera documenta√ß√£o inicial")
            print(f"  {Colors.GREEN}start-agent{Colors.ENDC}    Inicia o agente de manuten√ß√£o de documenta√ß√£o")
            print(f"  {Colors.GREEN}start-server{Colors.ENDC}   Inicia o servidor para visualizar a documenta√ß√£o")
            print(f"  {Colors.GREEN}search{Colors.ENDC}         Pesquisa na documenta√ß√£o")
    
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}Opera√ß√£o interrompida pelo usu√°rio{Colors.ENDC}")
    
    except Exception as e:
        logger.error(f"Erro inesperado: {e}")
        print(f"\n{Colors.RED}Erro inesperado: {e}{Colors.ENDC}")
    
    finally:
        # Encerrar o sistema se estiver inicializado
        if system:
            system.shutdown()
    
    return 0


if __name__ == "__main__":
    sys.exit(main())