#!/usr/bin/env python3
"""
Documenta√ß√£o 4.0 - M√≥dulo de Gera√ß√£o de Documenta√ß√£o
Campus Party 2025 - Lucas D√≥rea Cardoso e Aulus Diniz

Este script implementa a funcionalidade de gera√ß√£o autom√°tica de documenta√ß√£o
a partir do c√≥digo-fonte, criando documenta√ß√£o estruturada em v√°rios formatos.
"""

import os
import sys
import json
import argparse
import subprocess
import logging
from typing import Dict, Any, Optional, List, Union, Tuple
from datetime import datetime

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('doc40-gerador')

# Cores para terminal
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def verificar_claude_code() -> bool:
    """
    Verifica se o Claude Code CLI est√° instalado.
    
    Returns:
        bool: True se estiver instalado, False caso contr√°rio
    """
    try:
        result = subprocess.run(
            ["claude-code", "--version"], 
            capture_output=True, 
            text=True
        )
        if result.returncode == 0:
            version = result.stdout.strip()
            logger.info(f"Claude Code instalado: {version}")
            return True
        else:
            logger.warning("Claude Code instalado, mas n√£o foi poss√≠vel obter a vers√£o")
            return True
    except Exception as e:
        logger.error(f"Claude Code n√£o est√° instalado ou n√£o est√° no PATH: {e}")
        print(f"\n{Colors.RED}Claude Code CLI n√£o encontrado. Por favor, instale:"+
              f"\n\ncurl -sSL https://raw.githubusercontent.com/anthropic/claude-code/main/install.sh | bash{Colors.ENDC}\n")
        return False

def gerar_documentacao(diretorio: str, formato: str = "markdown", 
                     saida: str = "docs", escopo: str = "all") -> Dict[str, Any]:
    """
    Gera documenta√ß√£o completa a partir do c√≥digo-fonte.
    
    Esta fun√ß√£o utiliza o Claude Code CLI para analisar o c√≥digo-fonte e
    gerar documenta√ß√£o estruturada no formato especificado.
    
    Args:
        diretorio: Diret√≥rio do projeto
        formato: Formato da documenta√ß√£o (markdown, html, pdf)
        saida: Diret√≥rio de sa√≠da para a documenta√ß√£o
        escopo: Escopo da documenta√ß√£o (all, api, internal, public)
        
    Returns:
        dict: Resultado da opera√ß√£o com detalhes e estat√≠sticas
    """
    logger.info(f"Gerando documenta√ß√£o para: {diretorio}")
    print(f"\n{Colors.BLUE}üöÄ Gerando documenta√ß√£o para: {diretorio}{Colors.ENDC}")
    print(f"{Colors.BLUE}üìÑ Formato: {formato}{Colors.ENDC}")
    print(f"{Colors.BLUE}üìÇ Sa√≠da: {saida}{Colors.ENDC}")
    
    # Validar diret√≥rio
    if not os.path.isdir(diretorio):
        logger.error(f"Diret√≥rio n√£o encontrado: {diretorio}")
        print(f"{Colors.RED}‚ùå Diret√≥rio n√£o encontrado: {diretorio}{Colors.ENDC}")
        return {
            "success": False,
            "error": "DirectoryNotFound",
            "message": f"Diret√≥rio n√£o encontrado: {diretorio}"
        }
    
    # Validar formato
    formatos_suportados = ["markdown", "html", "pdf", "json", "openapi"]
    if formato not in formatos_suportados:
        logger.error(f"Formato n√£o suportado: {formato}")
        print(f"{Colors.RED}‚ùå Formato n√£o suportado: {formato}{Colors.ENDC}")
        print(f"{Colors.YELLOW}Formatos suportados: {', '.join(formatos_suportados)}{Colors.ENDC}")
        return {
            "success": False,
            "error": "UnsupportedFormat",
            "message": f"Formato n√£o suportado: {formato}"
        }
    
    # Criar diret√≥rio de sa√≠da se n√£o existir
    os.makedirs(saida, exist_ok=True)
    
    # Preparar comando base
    base_command = [
        "claude-code",
        "document",
        "--directory", diretorio,
        "--format", formato,
        "--output-dir", saida
    ]
    
    # Adicionar escopo se especificado
    if escopo != "all":
        base_command.extend(["--scope", escopo])
    
    # Registrar in√≠cio
    inicio = datetime.now()
    print(f"\n{Colors.BLUE}‚è±Ô∏è In√≠cio: {inicio.strftime('%Y-%m-%d %H:%M:%S')}{Colors.ENDC}")
    
    # Executar o comando
    try:
        print(f"\n{Colors.YELLOW}Analisando o c√≥digo-fonte...{Colors.ENDC}")
        result = subprocess.run(base_command, capture_output=True, text=True)
        
        # Registrar fim
        fim = datetime.now()
        duracao = (fim - inicio).total_seconds()
        
        # Verificar resultado
        if result.returncode == 0:
            logger.info(f"Documenta√ß√£o gerada com sucesso em: {saida}")
            print(f"\n{Colors.GREEN}‚úÖ Documenta√ß√£o gerada com sucesso em: {saida}{Colors.ENDC}")
            print(f"{Colors.BLUE}‚è±Ô∏è Tempo de execu√ß√£o: {duracao:.2f} segundos{Colors.ENDC}")
            
            # Listar arquivos gerados
            arquivos_gerados = []
            for root, _, files in os.walk(saida):
                for file in files:
                    if file.endswith(('.md', '.html', '.pdf', '.json')):
                        caminho_relativo = os.path.relpath(os.path.join(root, file), saida)
                        arquivos_gerados.append(caminho_relativo)
            
            print(f"\n{Colors.BLUE}üìÑ Arquivos gerados:{Colors.ENDC}")
            for arquivo in sorted(arquivos_gerados):
                print(f"  - {arquivo}")
            
            # Registrar a gera√ß√£o no log
            log_file = os.path.join(saida, "geracoes.log")
            with open(log_file, "a") as f:
                f.write(f"{inicio.strftime('%Y-%m-%d %H:%M:%S')} - Gera√ß√£o de documenta√ß√£o em formato {formato}\n")
                f.write(f"  Dura√ß√£o: {duracao:.2f} segundos\n")
                f.write(f"  Arquivos gerados: {len(arquivos_gerados)}\n")
                f.write("\n")
            
            return {
                "success": True,
                "output_dir": saida,
                "format": formato,
                "duration_seconds": duracao,
                "files_generated": len(arquivos_gerados),
                "file_list": arquivos_gerados
            }
        else:
            logger.error(f"Erro ao gerar documenta√ß√£o: {result.stderr}")
            print(f"\n{Colors.RED}‚ùå Erro ao gerar documenta√ß√£o:{Colors.ENDC}")
            print(result.stderr)
            return {
                "success": False,
                "error": "GenerationError",
                "message": result.stderr,
                "duration_seconds": duracao
            }
    except Exception as e:
        # Registrar fim em caso de exce√ß√£o
        fim = datetime.now()
        duracao = (fim - inicio).total_seconds()
        
        logger.error(f"Exce√ß√£o ao gerar documenta√ß√£o: {e}")
        print(f"\n{Colors.RED}‚ùå Exce√ß√£o ao gerar documenta√ß√£o: {str(e)}{Colors.ENDC}")
        return {
            "success": False,
            "error": "Exception",
            "message": str(e),
            "duration_seconds": duracao
        }

def gerar_documentacao_api(diretorio: str, formato: str = "openapi", 
                        saida: str = "docs/api") -> Dict[str, Any]:
    """
    Gera documenta√ß√£o espec√≠fica para APIs.
    
    Esta fun√ß√£o foca na gera√ß√£o de documenta√ß√£o para APIs,
    utilizando formatos como OpenAPI (Swagger).
    
    Args:
        diretorio: Diret√≥rio do projeto
        formato: Formato da documenta√ß√£o (openapi, markdown, html)
        saida: Diret√≥rio de sa√≠da para a documenta√ß√£o
        
    Returns:
        dict: Resultado da opera√ß√£o com detalhes e estat√≠sticas
    """
    logger.info(f"Gerando documenta√ß√£o de API para: {diretorio}")
    print(f"\n{Colors.BLUE}üöÄ Gerando documenta√ß√£o de API para: {diretorio}{Colors.ENDC}")
    print(f"{Colors.BLUE}üìÑ Formato: {formato}{Colors.ENDC}")
    print(f"{Colors.BLUE}üìÇ Sa√≠da: {saida}{Colors.ENDC}")
    
    # Validar diret√≥rio
    if not os.path.isdir(diretorio):
        logger.error(f"Diret√≥rio n√£o encontrado: {diretorio}")
        print(f"{Colors.RED}‚ùå Diret√≥rio n√£o encontrado: {diretorio}{Colors.ENDC}")
        return {
            "success": False,
            "error": "DirectoryNotFound",
            "message": f"Diret√≥rio n√£o encontrado: {diretorio}"
        }
    
    # Criar diret√≥rio de sa√≠da se n√£o existir
    os.makedirs(saida, exist_ok=True)
    
    # Comando para o Claude Code CLI
    command = [
        "claude-code",
        "document-api",  # Comando espec√≠fico para documenta√ß√£o de API
        "--directory", diretorio,
        "--format", formato,
        "--output-dir", saida
    ]
    
    # Registrar in√≠cio
    inicio = datetime.now()
    print(f"\n{Colors.BLUE}‚è±Ô∏è In√≠cio: {inicio.strftime('%Y-%m-%d %H:%M:%S')}{Colors.ENDC}")
    
    # Executar o comando
    try:
        print(f"\n{Colors.YELLOW}Analisando APIs e endpoints...{Colors.ENDC}")
        result = subprocess.run(command, capture_output=True, text=True)
        
        # Registrar fim
        fim = datetime.now()
        duracao = (fim - inicio).total_seconds()
        
        # Verificar resultado
        if result.returncode == 0:
            logger.info(f"Documenta√ß√£o de API gerada com sucesso em: {saida}")
            print(f"\n{Colors.GREEN}‚úÖ Documenta√ß√£o de API gerada com sucesso em: {saida}{Colors.ENDC}")
            print(f"{Colors.BLUE}‚è±Ô∏è Tempo de execu√ß√£o: {duracao:.2f} segundos{Colors.ENDC}")
            
            # Listar arquivos gerados
            arquivos_gerados = []
            for root, _, files in os.walk(saida):
                for file in files:
                    if file.endswith(('.json', '.yaml', '.md', '.html')):
                        caminho_relativo = os.path.relpath(os.path.join(root, file), saida)
                        arquivos_gerados.append(caminho_relativo)
            
            print(f"\n{Colors.BLUE}üìÑ Arquivos gerados:{Colors.ENDC}")
            for arquivo in sorted(arquivos_gerados):
                print(f"  - {arquivo}")
            
            # Detectar arquivo principal OpenAPI
            arquivo_openapi = None
            for arquivo in arquivos_gerados:
                if arquivo.endswith(('openapi.json', 'openapi.yaml', 'swagger.json', 'swagger.yaml')):
                    arquivo_openapi = arquivo
                    break
            
            if arquivo_openapi:
                print(f"\n{Colors.GREEN}üìÑ Arquivo principal OpenAPI: {arquivo_openapi}{Colors.ENDC}")
            
            return {
                "success": True,
                "output_dir": saida,
                "format": formato,
                "duration_seconds": duracao,
                "files_generated": len(arquivos_gerados),
                "file_list": arquivos_gerados,
                "openapi_file": arquivo_openapi
            }
        else:
            logger.error(f"Erro ao gerar documenta√ß√£o de API: {result.stderr}")
            print(f"\n{Colors.RED}‚ùå Erro ao gerar documenta√ß√£o de API:{Colors.ENDC}")
            print(result.stderr)
            return {
                "success": False,
                "error": "APIDocGenerationError",
                "message": result.stderr,
                "duration_seconds": duracao
            }
    except Exception as e:
        # Registrar fim em caso de exce√ß√£o
        fim = datetime.now()
        duracao = (fim - inicio).total_seconds()
        
        logger.error(f"Exce√ß√£o ao gerar documenta√ß√£o de API: {e}")
        print(f"\n{Colors.RED}‚ùå Exce√ß√£o ao gerar documenta√ß√£o de API: {str(e)}{Colors.ENDC}")
        return {
            "success": False,
            "error": "Exception",
            "message": str(e),
            "duration_seconds": duracao
        }

def main():
    """Fun√ß√£o principal do script."""
    parser = argparse.ArgumentParser(
        description="Documenta√ß√£o 4.0 - Gera√ß√£o Autom√°tica de Documenta√ß√£o",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    
    # Subcomandos
    subparsers = parser.add_subparsers(dest="command", help="Comando a executar")
    
    # Comando: geral (padr√£o)
    parser_geral = subparsers.add_parser("geral", help="Gerar documenta√ß√£o geral do projeto")
    parser_geral.add_argument("--dir", "-d", type=str, default=os.getcwd(),
                             help="Diret√≥rio do projeto (padr√£o: diret√≥rio atual)")
    parser_geral.add_argument("--formato", "-f", type=str, default="markdown",
                             choices=["markdown", "html", "pdf"],
                             help="Formato da documenta√ß√£o")
    parser_geral.add_argument("--saida", "-o", type=str, default="docs",
                             help="Diret√≥rio de sa√≠da")
    parser_geral.add_argument("--escopo", "-s", type=str, default="all",
                             choices=["all", "api", "internal", "public"],
                             help="Escopo da documenta√ß√£o")
    
    # Comando: api
    parser_api = subparsers.add_parser("api", help="Gerar documenta√ß√£o espec√≠fica para APIs")
    parser_api.add_argument("--dir", "-d", type=str, default=os.getcwd(),
                           help="Diret√≥rio do projeto (padr√£o: diret√≥rio atual)")
    parser_api.add_argument("--formato", "-f", type=str, default="openapi",
                           choices=["openapi", "markdown", "html"],
                           help="Formato da documenta√ß√£o de API")
    parser_api.add_argument("--saida", "-o", type=str, default="docs/api",
                           help="Diret√≥rio de sa√≠da")
    
    # Comando: tudo
    parser_tudo = subparsers.add_parser("tudo", help="Gerar toda a documenta√ß√£o (geral + API)")
    parser_tudo.add_argument("--dir", "-d", type=str, default=os.getcwd(),
                            help="Diret√≥rio do projeto (padr√£o: diret√≥rio atual)")
    parser_tudo.add_argument("--saida", "-o", type=str, default="docs",
                            help="Diret√≥rio de sa√≠da base")
    
    args = parser.parse_args()
    
    # Verificar se o Claude Code est√° instalado
    if not verificar_claude_code():
        return 1
    
    # Executar o comando especificado ou o padr√£o (geral)
    if args.command == "api":
        gerar_documentacao_api(args.dir, args.formato, args.saida)
    elif args.command == "tudo":
        # Gerar documenta√ß√£o geral
        print(f"{Colors.BOLD}=== Gerando Documenta√ß√£o Geral ==={Colors.ENDC}")
        geral_result = gerar_documentacao(args.dir, "markdown", args.saida)
        
        # Gerar documenta√ß√£o de API
        print(f"\n{Colors.BOLD}=== Gerando Documenta√ß√£o de API ==={Colors.ENDC}")
        api_result = gerar_documentacao_api(args.dir, "openapi", os.path.join(args.saida, "api"))
        
        # Resumo
        print(f"\n{Colors.BOLD}=== Resumo da Gera√ß√£o ==={Colors.ENDC}")
        print(f"Documenta√ß√£o Geral: {'‚úÖ Sucesso' if geral_result.get('success') else '‚ùå Falha'}")
        print(f"Documenta√ß√£o API: {'‚úÖ Sucesso' if api_result.get('success') else '‚ùå Falha'}")
    else:  # Padr√£o: "geral" ou nenhum comando
        gerar_documentacao(
            args.dir if hasattr(args, 'dir') else os.getcwd(),
            args.formato if hasattr(args, 'formato') else "markdown",
            args.saida if hasattr(args, 'saida') else "docs",
            args.escopo if hasattr(args, 'escopo') else "all"
        )
    
    return 0

if __name__ == "__main__":
    sys.exit(main())