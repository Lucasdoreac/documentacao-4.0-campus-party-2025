#!/usr/bin/env python3
"""
Documenta√ß√£o 4.0 - Agente de Manuten√ß√£o de Documenta√ß√£o
Campus Party 2025 - Lucas D√≥rea Cardoso e Aulus Diniz

Este script implementa um agente que monitora mudan√ßas no c√≥digo-fonte
e atualiza automaticamente a documenta√ß√£o quando detecta altera√ß√µes.
"""

import os
import sys
import json
import time
import argparse
import subprocess
import threading
import logging
from typing import Dict, Any, Optional, List, Union, Tuple
from datetime import datetime

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('doc40-agente.log')
    ]
)
logger = logging.getLogger('doc40-agente')

# Cores para terminal
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def verificar_claude_code() -> bool:
    """
    Verifica se o Claude Code CLI est√° instalado.
    
    Returns:
        bool: True se estiver instalado, False caso contr√°rio
    """
    try:
        result = subprocess.run(
            ["claude-code", "--version"], 
            capture_output=True, 
            text=True
        )
        if result.returncode == 0:
            version = result.stdout.strip()
            logger.info(f"Claude Code instalado: {version}")
            return True
        else:
            logger.warning("Claude Code instalado, mas n√£o foi poss√≠vel obter a vers√£o")
            return True
    except Exception as e:
        logger.error(f"Claude Code n√£o est√° instalado ou n√£o est√° no PATH: {e}")
        print(f"\n{Colors.RED}Claude Code CLI n√£o encontrado. Por favor, instale:"+
              f"\n\ncurl -sSL https://raw.githubusercontent.com/anthropic/claude-code/main/install.sh | bash{Colors.ENDC}\n")
        return False

def verificar_git(diretorio: str) -> bool:
    """
    Verifica se o diret√≥rio √© um reposit√≥rio Git.
    
    Args:
        diretorio: O diret√≥rio a verificar
        
    Returns:
        bool: True se for um reposit√≥rio Git, False caso contr√°rio
    """
    try:
        os.chdir(diretorio)
        result = subprocess.run(
            ["git", "rev-parse", "--is-inside-work-tree"],
            capture_output=True,
            text=True
        )
        return result.returncode == 0 and result.stdout.strip() == "true"
    except Exception as e:
        logger.error(f"Erro ao verificar reposit√≥rio Git: {e}")
        return False

def verificar_mudancas(diretorio: str, ultimo_commit: Optional[str] = None) -> Tuple[bool, Optional[str]]:
    """
    Verifica se houve mudan√ßas no reposit√≥rio desde o √∫ltimo commit.
    
    Args:
        diretorio: O diret√≥rio do reposit√≥rio
        ultimo_commit: O √∫ltimo commit verificado
        
    Returns:
        tuple: (houve_mudancas, commit_atual)
    """
    # Mudar para o diret√≥rio do projeto
    os.chdir(diretorio)
    
    # Obter o √∫ltimo commit
    comando = ["git", "rev-parse", "HEAD"]
    resultado = subprocess.run(comando, capture_output=True, text=True)
    
    if resultado.returncode != 0:
        logger.error(f"Erro ao obter o √∫ltimo commit: {resultado.stderr}")
        return False, None
    
    commit_atual = resultado.stdout.strip()
    
    # Se n√£o temos um commit anterior para comparar, apenas retornar o atual
    if ultimo_commit is None:
        return False, commit_atual
    
    # Se o commit atual √© diferente do √∫ltimo, houve mudan√ßas
    return commit_atual != ultimo_commit, commit_atual

def obter_arquivos_alterados(diretorio: str, commit_anterior: str, commit_atual: str) -> List[str]:
    """
    Obt√©m a lista de arquivos alterados entre dois commits.
    
    Args:
        diretorio: O diret√≥rio do reposit√≥rio
        commit_anterior: O commit anterior
        commit_atual: O commit atual
        
    Returns:
        list: Lista de arquivos alterados
    """
    try:
        os.chdir(diretorio)
        comando = ["git", "diff", "--name-only", commit_anterior, commit_atual]
        resultado = subprocess.run(comando, capture_output=True, text=True)
        
        if resultado.returncode != 0:
            logger.error(f"Erro ao obter arquivos alterados: {resultado.stderr}")
            return []
        
        # Filtrar apenas arquivos existentes (pode haver arquivos exclu√≠dos)
        arquivos = resultado.stdout.strip().split('\n')
        arquivos_existentes = [f for f in arquivos if f and os.path.exists(os.path.join(diretorio, f))]
        
        return arquivos_existentes
    except Exception as e:
        logger.error(f"Exce√ß√£o ao obter arquivos alterados: {e}")
        return []

def obter_mensagem_commit(diretorio: str, commit_id: str) -> Optional[str]:
    """
    Obt√©m a mensagem de um commit.
    
    Args:
        diretorio: O diret√≥rio do reposit√≥rio
        commit_id: O ID do commit
        
    Returns:
        str: A mensagem do commit ou None em caso de erro
    """
    try:
        os.chdir(diretorio)
        comando = ["git", "log", "-1", "--pretty=%B", commit_id]
        resultado = subprocess.run(comando, capture_output=True, text=True)
        
        if resultado.returncode != 0:
            logger.error(f"Erro ao obter mensagem do commit: {resultado.stderr}")
            return None
        
        return resultado.stdout.strip()
    except Exception as e:
        logger.error(f"Exce√ß√£o ao obter mensagem do commit: {e}")
        return None

def atualizar_documentacao(diretorio: str, commit_id: str, saida: str = "docs") -> Dict[str, Any]:
    """
    Atualiza a documenta√ß√£o com base nas mudan√ßas do commit.
    
    Args:
        diretorio: O diret√≥rio do reposit√≥rio
        commit_id: O ID do commit
        saida: O diret√≥rio de sa√≠da para a documenta√ß√£o atualizada
        
    Returns:
        dict: Resultado da opera√ß√£o
    """
    logger.info(f"Atualizando documenta√ß√£o para commit: {commit_id[:8] if commit_id else 'N/A'}")
    print(f"\n{Colors.BLUE}üîÑ Atualizando documenta√ß√£o para commit: {commit_id[:8] if commit_id else 'N/A'}{Colors.ENDC}")
    
    # Criar diret√≥rio de sa√≠da se n√£o existir
    os.makedirs(saida, exist_ok=True)
    
    # Obter mensagem do commit para an√°lise de contexto
    mensagem_commit = obter_mensagem_commit(diretorio, commit_id)
    if mensagem_commit:
        logger.info(f"Mensagem do commit: {mensagem_commit}")
        print(f"{Colors.BLUE}üìù Mensagem do commit: {mensagem_commit}{Colors.ENDC}")
    
    # Comando para o Claude Code CLI
    comando = [
        "claude-code",
        "update-docs",
        "--directory", diretorio,
        "--commit", commit_id,
        "--output-dir", saida
    ]
    
    # Registrar in√≠cio
    inicio = datetime.now()
    
    # Executar o comando
    try:
        resultado = subprocess.run(comando, capture_output=True, text=True)
        
        # Registrar fim
        fim = datetime.now()
        duracao = (fim - inicio).total_seconds()
        
        # Verificar resultado
        if resultado.returncode == 0:
            logger.info(f"Documenta√ß√£o atualizada com sucesso em: {saida}")
            print(f"{Colors.GREEN}‚úÖ Documenta√ß√£o atualizada com sucesso em: {saida}{Colors.ENDC}")
            print(f"{Colors.BLUE}‚è±Ô∏è Tempo de execu√ß√£o: {duracao:.2f} segundos{Colors.ENDC}")
            
            # Registrar a atualiza√ß√£o
            registro_atualizacao(saida, commit_id, mensagem_commit, duracao)
            
            return {
                "success": True,
                "output_dir": saida,
                "commit_id": commit_id,
                "message": mensagem_commit,
                "duration_seconds": duracao
            }
        else:
            logger.error(f"Erro ao atualizar documenta√ß√£o: {resultado.stderr}")
            print(f"{Colors.RED}‚ùå Erro ao atualizar documenta√ß√£o: {resultado.stderr}{Colors.ENDC}")
            return {
                "success": False,
                "error": "UpdateError",
                "message": resultado.stderr,
                "duration_seconds": duracao
            }
    except Exception as e:
        # Registrar fim em caso de exce√ß√£o
        fim = datetime.now()
        duracao = (fim - inicio).total_seconds()
        
        logger.error(f"Exce√ß√£o ao atualizar documenta√ß√£o: {e}")
        print(f"{Colors.RED}‚ùå Exce√ß√£o ao atualizar documenta√ß√£o: {str(e)}{Colors.ENDC}")
        return {
            "success": False,
            "error": "Exception",
            "message": str(e),
            "duration_seconds": duracao
        }

def registro_atualizacao(diretorio_saida: str, commit_id: str, 
                      mensagem_commit: Optional[str], duracao: float) -> None:
    """
    Registra uma atualiza√ß√£o de documenta√ß√£o no log.
    
    Args:
        diretorio_saida: O diret√≥rio de sa√≠da da documenta√ß√£o
        commit_id: O ID do commit
        mensagem_commit: A mensagem do commit
        duracao: A dura√ß√£o da atualiza√ß√£o em segundos
    """
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_file = os.path.join(diretorio_saida, "atualizacoes.log")
    
    with open(log_file, 'a') as f:
        f.write(f"{timestamp} - Documenta√ß√£o atualizada para commit {commit_id[:8]}\n")
        if mensagem_commit:
            f.write(f"  Mensagem: {mensagem_commit}\n")
        f.write(f"  Dura√ß√£o: {duracao:.2f} segundos\n")
        f.write("\n")

def configurar_git_hook(diretorio: str) -> bool:
    """
    Configura um hook Git para atualizar a documenta√ß√£o ap√≥s cada commit.
    
    Args:
        diretorio: O diret√≥rio do reposit√≥rio
        
    Returns:
        bool: True se o hook foi configurado com sucesso, False caso contr√°rio
    """
    try:
        os.chdir(diretorio)
        hooks_dir = os.path.join(diretorio, ".git", "hooks")
        
        # Verificar se o diret√≥rio de hooks existe
        if not os.path.isdir(hooks_dir):
            logger.error(f"Diret√≥rio de hooks n√£o encontrado: {hooks_dir}")
            print(f"{Colors.RED}‚ùå Diret√≥rio de hooks n√£o encontrado: {hooks_dir}{Colors.ENDC}")
            return False
        
        # Conte√∫do do hook post-commit
        hook_content = """#!/bin/bash
# Documenta√ß√£o 4.0 - Post-Commit Hook
# Este hook √© executado ap√≥s cada commit para atualizar a documenta√ß√£o

# Obter diret√≥rio raiz do reposit√≥rio
REPO_ROOT=$(git rev-parse --show-toplevel)

# Executar o script de atualiza√ß√£o da documenta√ß√£o
python3 "$REPO_ROOT/doc40-agente.py" atualizar --dir "$REPO_ROOT"

# Ou usar diretamente o Claude Code CLI
# claude-code update-docs --directory "$REPO_ROOT" --commit HEAD --output-dir "$REPO_ROOT/docs"
"""
        
        # Caminho do hook
        hook_path = os.path.join(hooks_dir, "post-commit")
        
        # Gravar o hook
        with open(hook_path, 'w') as f:
            f.write(hook_content)
        
        # Tornar o hook execut√°vel
        os.chmod(hook_path, 0o755)
        
        logger.info(f"Hook Git configurado com sucesso: {hook_path}")
        print(f"{Colors.GREEN}‚úÖ Hook Git configurado com sucesso: {hook_path}{Colors.ENDC}")
        
        return True
    except Exception as e:
        logger.error(f"Erro ao configurar hook Git: {e}")
        print(f"{Colors.RED}‚ùå Erro ao configurar hook Git: {str(e)}{Colors.ENDC}")
        return False

def executar_agente(diretorio: str, saida: str = "docs", intervalo: int = 300) -> None:
    """
    Executa o agente de manuten√ß√£o de documenta√ß√£o em um loop cont√≠nuo.
    
    Args:
        diretorio: O diret√≥rio do reposit√≥rio
        saida: O diret√≥rio de sa√≠da para a documenta√ß√£o
        intervalo: O intervalo em segundos entre verifica√ß√µes
    """
    logger.info(f"Iniciando agente de manuten√ß√£o de documenta√ß√£o")
    print(f"\n{Colors.BLUE}ü§ñ Iniciando agente de manuten√ß√£o de documenta√ß√£o{Colors.ENDC}")
    print(f"{Colors.BLUE}üìÅ Diret√≥rio: {diretorio}{Colors.ENDC}")
    print(f"{Colors.BLUE}üìÇ Sa√≠da: {saida}{Colors.ENDC}")
    print(f"{Colors.BLUE}‚è±Ô∏è Intervalo: {intervalo} segundos{Colors.ENDC}")
    
    # Verificar se o diret√≥rio √© um reposit√≥rio Git
    if not verificar_git(diretorio):
        logger.error(f"O diret√≥rio {diretorio} n√£o √© um reposit√≥rio Git")
        print(f"{Colors.RED}‚ùå O diret√≥rio {diretorio} n√£o √© um reposit√≥rio Git{Colors.ENDC}")
        return
    
    # Criar diret√≥rio de sa√≠da se n√£o existir
    os.makedirs(saida, exist_ok=True)
    
    # Inicializar o √∫ltimo commit
    _, ultimo_commit = verificar_mudancas(diretorio)
    logger.info(f"Commit inicial: {ultimo_commit[:8] if ultimo_commit else 'Nenhum'}")
    print(f"{Colors.BLUE}üìå Commit inicial: {ultimo_commit[:8] if ultimo_commit else 'Nenhum'}{Colors.ENDC}")
    
    try:
        # Loop principal do agente
        while True:
            try:
                # Verificar mudan√ßas
                houve_mudancas, commit_atual = verificar_mudancas(diretorio, ultimo_commit)
                
                # Se houve mudan√ßas, atualizar a documenta√ß√£o
                if houve_mudancas:
                    logger.info(f"Detectadas mudan√ßas! Novo commit: {commit_atual[:8]}")
                    print(f"\n{Colors.YELLOW}üîç Detectadas mudan√ßas! Novo commit: {commit_atual[:8]}{Colors.ENDC}")
                    
                    # Obter arquivos alterados
                    arquivos_alterados = obter_arquivos_alterados(diretorio, ultimo_commit, commit_atual)
                    logger.info(f"Arquivos alterados: {len(arquivos_alterados)}")
                    
                    if arquivos_alterados:
                        print(f"{Colors.BLUE}üìÑ Arquivos alterados: {len(arquivos_alterados)}{Colors.ENDC}")
                        for arquivo in arquivos_alterados[:5]:  # Mostrar apenas os primeiros 5
                            print(f"  - {arquivo}")
                        if len(arquivos_alterados) > 5:
                            print(f"  ... e mais {len(arquivos_alterados) - 5} arquivo(s)")
                    
                    # Atualizar a documenta√ß√£o
                    atualizar_documentacao(diretorio, commit_atual, saida)
                    ultimo_commit = commit_atual
                
                # Aguardar o pr√≥ximo ciclo
                time.sleep(intervalo)
                
            except KeyboardInterrupt:
                raise  # Repassar para ser tratado no bloco principal
                
            except Exception as e:
                logger.error(f"Erro no ciclo do agente: {e}")
                print(f"{Colors.RED}‚ùå Erro no ciclo do agente: {str(e)}{Colors.ENDC}")
                print(f"{Colors.YELLOW}‚ö†Ô∏è Aguardando pr√≥ximo ciclo...{Colors.ENDC}")
                time.sleep(intervalo)
    
    except KeyboardInterrupt:
        logger.info("Agente interrompido pelo usu√°rio")
        print(f"\n{Colors.YELLOW}‚èπÔ∏è Agente interrompido pelo usu√°rio{Colors.ENDC}")

def main():
    """Fun√ß√£o principal do script."""
    parser = argparse.ArgumentParser(
        description="Documenta√ß√£o 4.0 - Agente de Manuten√ß√£o de Documenta√ß√£o",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    
    # Subcomandos
    subparsers = parser.add_subparsers(dest="command", help="Comando a executar")
    
    # Comando: iniciar (padr√£o)
    parser_iniciar = subparsers.add_parser("iniciar", help="Iniciar o agente de manuten√ß√£o")
    parser_iniciar.add_argument("--dir", "-d", type=str, default=os.getcwd(),
                               help="Diret√≥rio do projeto (padr√£o: diret√≥rio atual)")
    parser_iniciar.add_argument("--saida", "-o", type=str, default="docs",
                               help="Diret√≥rio de sa√≠da")
    parser_iniciar.add_argument("--intervalo", "-i", type=int, default=300,
                               help="Intervalo entre verifica√ß√µes em segundos")
    
    # Comando: atualizar
    parser_atualizar = subparsers.add_parser("atualizar", help="Atualizar documenta√ß√£o manualmente")
    parser_atualizar.add_argument("--dir", "-d", type=str, default=os.getcwd(),
                                 help="Diret√≥rio do projeto (padr√£o: diret√≥rio atual)")
    parser_atualizar.add_argument("--saida", "-o", type=str, default="docs",
                                 help="Diret√≥rio de sa√≠da")
    parser_atualizar.add_argument("--commit", "-c", type=str, default="HEAD",
                                 help="ID do commit (padr√£o: HEAD)")
    
    # Comando: configurar-hook
    parser_hook = subparsers.add_parser("configurar-hook", help="Configurar hook Git para atualiza√ß√£o autom√°tica")
    parser_hook.add_argument("--dir", "-d", type=str, default=os.getcwd(),
                            help="Diret√≥rio do projeto (padr√£o: diret√≥rio atual)")
    
    args = parser.parse_args()
    
    # Verificar se o Claude Code est√° instalado
    if not verificar_claude_code():
        return 1
    
    # Executar o comando especificado ou o padr√£o (iniciar)
    if args.command == "atualizar":
        if not verificar_git(args.dir):
            logger.error(f"O diret√≥rio {args.dir} n√£o √© um reposit√≥rio Git")
            print(f"{Colors.RED}‚ùå O diret√≥rio {args.dir} n√£o √© um reposit√≥rio Git{Colors.ENDC}")
            return 1
        
        atualizar_documentacao(args.dir, args.commit, args.saida)
    
    elif args.command == "configurar-hook":
        if not verificar_git(args.dir):
            logger.error(f"O diret√≥rio {args.dir} n√£o √© um reposit√≥rio Git")
            print(f"{Colors.RED}‚ùå O diret√≥rio {args.dir} n√£o √© um reposit√≥rio Git{Colors.ENDC}")
            return 1
        
        configurar_git_hook(args.dir)
    
    else:  # Padr√£o: "iniciar" ou nenhum comando
        executar_agente(
            args.dir if hasattr(args, 'dir') else os.getcwd(),
            args.saida if hasattr(args, 'saida') else "docs",
            args.intervalo if hasattr(args, 'intervalo') else 300
        )
    
    return 0

if __name__ == "__main__":
    sys.exit(main())