#!/usr/bin/env python3
"""
Documenta√ß√£o 4.0 com Claude Code - SOTA Live Code Generator
Desenvolvido por Lucas D√≥rea Cardoso e Aulus Diniz
Campus Party 2025

Este script gera c√≥digo em tempo real com documenta√ß√£o SOTA integrada.
O sistema demonstra a gera√ß√£o de c√≥digo e documenta√ß√£o simult√¢nea durante uma apresenta√ß√£o.
"""

import os
import sys
import json
import time
import argparse
import datetime
import random
from typing import List, Dict, Any, Optional, Union, Tuple

class LiveCodeGenerator:
    """Gerador de c√≥digo ao vivo com documenta√ß√£o SOTA integrada."""
    
    def __init__(self, project_dir: str, presenter_names: List[str]):
        """
        Inicializa o gerador de c√≥digo ao vivo.
        
        Args:
            project_dir: Diret√≥rio do projeto onde o c√≥digo ser√° gerado
            presenter_names: Nomes dos apresentadores para os cr√©ditos
        """
        self.project_dir = project_dir
        self.presenter_names = presenter_names
        self.timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        print(f"\n{'='*80}")
        print(f"üöÄ DOCUMENTA√á√ÉO 4.0 - DEMO AO VIVO")
        print(f"{'='*80}")
        print(f"Iniciado por: {', '.join(presenter_names)}")
        print(f"Data e hora: {self.timestamp}")
        print(f"Diret√≥rio do projeto: {project_dir}")
        print(f"{'='*80}\n")
    
    def generate_api_module(self, typing_speed: float = 0.001):
        """
        Gera um m√≥dulo de API com documenta√ß√£o completa.
        
        Args:
            typing_speed: Velocidade de simula√ß√£o de digita√ß√£o (segundos por caractere)
        """
        filename = os.path.join(self.project_dir, "api_module.py")
        
        code = '''"""
API Module - Documenta√ß√£o 4.0 SOTA Demo
Autores: {0}
Gerado em: {1}

Este m√≥dulo implementa endpoints da API com documenta√ß√£o SOTA integrada.
"""

import json
import uuid
import datetime
from typing import Dict, List, Optional, Any, Union

class PaymentProcessor:
    """
    Processador de pagamentos com valida√ß√£o avan√ßada e documenta√ß√£o autom√°tica.
    
    Este processador implementa v√°rias formas de pagamento e gera
    documenta√ß√£o SOTA automaticamente para cada m√©todo.
    
    Exemplos:
        ```python
        processor = PaymentProcessor(api_key="seu_api_key")
        result = processor.process_payment(
            amount=100.50,
            payment_method="credit_card",
            customer_id="cus_123456"
        )
        ```
    """
    
    def __init__(self, api_key: str, environment: str = "production"):
        """
        Inicializa o processador de pagamentos.
        
        Args:
            api_key: Chave de API para autentica√ß√£o
            environment: Ambiente de execu√ß√£o ('production', 'sandbox')
            
        Raises:
            ValueError: Se a api_key for inv√°lida ou o ambiente n√£o for suportado
            
        Note:
            As chaves de API s√£o espec√≠ficas para cada ambiente.
            Nunca use chaves de produ√ß√£o em ambientes sandbox.
        """
        self.api_key = api_key
        self.environment = environment
        self._validate_config()
        self.transaction_log = []
        
    def _validate_config(self) -> None:
        """
        Valida a configura√ß√£o do processador.
        
        Raises:
            ValueError: Se a configura√ß√£o for inv√°lida
            
        Implementation Details:
            - Verifica o formato da API key
            - Valida o ambiente de execu√ß√£o
            - Registra a inicializa√ß√£o no sistema de auditoria
        """
        valid_environments = ["production", "sandbox", "test"]
        if self.environment not in valid_environments:
            raise ValueError(f"Ambiente '{{self.environment}}' n√£o suportado. Use {{valid_environments}}")
        
        if not self.api_key or len(self.api_key) < 10:
            raise ValueError("API key inv√°lida")
    
    def process_payment(
        self, 
        amount: float, 
        payment_method: str, 
        customer_id: str,
        currency: str = "USD",
        metadata: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """
        Processa um pagamento usando o m√©todo especificado.
        
        Args:
            amount: Valor da transa√ß√£o
            payment_method: M√©todo de pagamento ('credit_card', 'pix', 'boleto')
            customer_id: ID √∫nico do cliente
            currency: C√≥digo da moeda (default: "USD")
            metadata: Dados adicionais para a transa√ß√£o (opcional)
            
        Returns:
            Dicion√°rio com detalhes da transa√ß√£o processada
            
        Raises:
            ValueError: Se algum par√¢metro for inv√°lido
            PaymentError: Se o processamento falhar
            
        Examples:
            Pagamento com cart√£o de cr√©dito:
            ```python
            result = processor.process_payment(
                amount=100.50,
                payment_method="credit_card",
                customer_id="cus_123456"
            )
            ```
            
            Pagamento com PIX:
            ```python
            result = processor.process_payment(
                amount=150.75,
                payment_method="pix",
                customer_id="cus_123456",
                currency="BRL"
            )
            # result cont√©m 'qr_code' para pagamento
            ```
            
        Note:
            Este m√©todo √© thread-safe e pode ser chamado concorrentemente.
            Todas as transa√ß√µes s√£o registradas no log de auditoria.
        """
        # Valida√ß√£o de entrada
        if amount <= 0:
            raise ValueError("O valor deve ser maior que zero")
            
        if not customer_id:
            raise ValueError("ID do cliente √© obrigat√≥rio")
            
        # Simula√ß√£o de processamento
        risk_score = self._calculate_risk_score(amount, payment_method, customer_id)
        
        # Cria√ß√£o da transa√ß√£o
        transaction = {{
            "transaction_id": f"tr_{{uuid.uuid4().hex[:10]}}",
            "status": "success",
            "amount": amount,
            "currency": currency,
            "payment_method": payment_method,
            "customer_id": customer_id,
            "risk_score": risk_score,
            "processed_at": datetime.datetime.now().isoformat(),
            "metadata": metadata if metadata else {{}}
        }}
        
        # Adicionar dados espec√≠ficos por m√©todo de pagamento
        if payment_method == "pix":
            transaction["qr_code"] = f"data:image/png;base64,{{self._generate_mock_qr_code()}}"
            transaction["expiration"] = (datetime.datetime.now() + 
                                        datetime.timedelta(minutes=30)).isoformat()
        elif payment_method == "boleto":
            transaction["barcode"] = f"34191790010104351004791020150008191070069999"
            transaction["pdf_url"] = f"https://api.example.com/boletos/{{transaction['transaction_id']}}"
            transaction["expiration"] = (datetime.datetime.now() + 
                                        datetime.timedelta(days=3)).isoformat()
        
        # Registrar transa√ß√£o
        self.transaction_log.append(transaction)
        
        return transaction
    
    def refund_payment(
        self, 
        transaction_id: str, 
        amount: Optional[float] = None,
        reason: str = "customer_request"
    ) -> Dict[str, Any]:
        """
        Processa um reembolso para uma transa√ß√£o.
        
        Args:
            transaction_id: ID da transa√ß√£o original
            amount: Valor a reembolsar (None = reembolso total)
            reason: Motivo do reembolso
            
        Returns:
            Dicion√°rio com detalhes do reembolso
            
        Raises:
            ValueError: Se a transa√ß√£o n√£o for encontrada
            RefundError: Se o reembolso n√£o puder ser processado
            
        Examples:
            Reembolso total:
            ```python
            refund = processor.refund_payment(
                transaction_id="tr_1234567890"
            )
            ```
            
            Reembolso parcial:
            ```python
            refund = processor.refund_payment(
                transaction_id="tr_1234567890",
                amount=50.25,
                reason="partial_dissatisfaction"
            )
            ```
        """
        # Buscar transa√ß√£o original (simulado)
        original_transaction = next(
            (t for t in self.transaction_log if t["transaction_id"] == transaction_id), 
            None
        )
        
        if not original_transaction:
            raise ValueError(f"Transa√ß√£o {{transaction_id}} n√£o encontrada")
            
        # Definir valor do reembolso
        refund_amount = amount if amount is not None else original_transaction["amount"]
        
        # Validar reembolso
        if refund_amount <= 0 or refund_amount > original_transaction["amount"]:
            raise ValueError("Valor de reembolso inv√°lido")
            
        # Processar reembolso
        refund = {{
            "refund_id": f"re_{{uuid.uuid4().hex[:10]}}",
            "transaction_id": transaction_id,
            "amount": refund_amount,
            "currency": original_transaction["currency"],
            "reason": reason,
            "status": "success",
            "processed_at": datetime.datetime.now().isoformat()
        }}
        
        return refund
    
    def _calculate_risk_score(self, amount: float, payment_method: str, customer_id: str) -> float:
        """
        Calcula o score de risco para uma transa√ß√£o.
        
        Args:
            amount: Valor da transa√ß√£o
            payment_method: M√©todo de pagamento
            customer_id: ID do cliente
            
        Returns:
            Score de risco entre 0.0 e 1.0
            
        Note:
            Esta √© uma implementa√ß√£o simplificada para demonstra√ß√£o.
            Sistemas reais usariam algoritmos de machine learning.
        """
        # Simula√ß√£o de c√°lculo de risco
        base_risk = 0.1
        
        # Fatores de ajuste para demonstra√ß√£o
        if amount > 1000:
            base_risk += 0.2
            
        if payment_method == "credit_card":
            base_risk += 0.1
        elif payment_method == "pix":
            base_risk -= 0.05
            
        # Adicionar alguma aleatoriedade para demonstra√ß√£o
        random_factor = 0.1 * (hash(customer_id) % 10) / 10.0
        
        risk_score = min(max(base_risk + random_factor, 0.0), 1.0)
        return round(risk_score, 2)
    
    def _generate_mock_qr_code(self) -> str:
        """
        Gera um QR code simulado para demonstra√ß√£o.
        
        Returns:
            String representando um QR code simulado
            
        Note:
            Em um sistema real, isso usaria uma biblioteca
            de gera√ß√£o de QR code como qrcode.
        """
        return "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAIAAADTED8xAAADMElEQVR4nOzVwQnAIBQFQYXff81RUHAQFwdmCrgP" # simulado


class PaymentError(Exception):
    """
    Exce√ß√£o para erros de processamento de pagamento.
    
    Attributes:
        message: Descri√ß√£o do erro
        code: C√≥digo de erro
        transaction_id: ID da transa√ß√£o (se dispon√≠vel)
    """
    def __init__(self, message: str, code: str, transaction_id: Optional[str] = None):
        self.message = message
        self.code = code
        self.transaction_id = transaction_id
        super().__init__(message)


class RefundError(Exception):
    """
    Exce√ß√£o para erros de processamento de reembolso.
    
    Attributes:
        message: Descri√ß√£o do erro
        code: C√≥digo de erro
        refund_id: ID do reembolso (se dispon√≠vel)
        transaction_id: ID da transa√ß√£o original
    """
    def __init__(self, message: str, code: str, transaction_id: str, refund_id: Optional[str] = None):
        self.message = message
        self.code = code
        self.transaction_id = transaction_id
        self.refund_id = refund_id
        super().__init__(message)


# Exemplo de uso (n√£o executado, apenas para documenta√ß√£o):
"""
# Inicializar o processador
processor = PaymentProcessor(api_key="sk_test_123456789")

# Processar um pagamento
try:
    payment = processor.process_payment(
        amount=100.50,
        payment_method="credit_card",
        customer_id="cus_123456",
        currency="USD",
        metadata={{"invoice_id": "inv_987"}}
    )
    print(f"Pagamento processado: {{payment['transaction_id']}}")
    
    # Processar um reembolso
    refund = processor.refund_payment(
        transaction_id=payment['transaction_id'],
        amount=50.25,
        reason="partial_refund"
    )
    print(f"Reembolso processado: {{refund['refund_id']}}")
    
except (ValueError, PaymentError, RefundError) as e:
    print(f"Erro: {{str(e)}}")
"""
'''.format(', '.join(self.presenter_names), self.timestamp)
        
        print(f"\nüìÑ Gerando m√≥dulo API com documenta√ß√£o SOTA integrada...")
        print(f"üìù Arquivo: {filename}")
        
        # Criar o diret√≥rio se n√£o existir
        os.makedirs(os.path.dirname(filename), exist_ok=True)
        
        # Simular digita√ß√£o do c√≥digo
        with open(filename, 'w') as f:
            for char in code:
                f.write(char)
                f.flush()
                time.sleep(typing_speed)
                # Imprimir progresso periodicamente
                if random.random() < 0.01:  # ~1% chance por caractere
                    progress = round(code.index(char) / len(code) * 100)
                    print(f"‚ö° Gerando c√≥digo: {progress}% conclu√≠do...", end="\r")
        
        print("\n‚úÖ M√≥dulo API gerado com sucesso!")
        print(f"üìä Estat√≠sticas:")
        print(f"   - {len(code.splitlines())} linhas de c√≥digo")
        print(f"   - {len([l for l in code.splitlines() if l.strip().startswith('\"\"\"') or l.strip().endswith('\"\"\"')])} linhas de documenta√ß√£o")
        print(f"   - {code.count('Args:')} blocos de par√¢metros documentados")
        print(f"   - {code.count('Returns:')} blocos de retorno documentados")
        print(f"   - {code.count('Raises:')} blocos de exce√ß√µes documentados")
        print(f"   - {code.count('Examples:')} exemplos de c√≥digo")
        print(f"   - {code.count('Note:')} notas explicativas")
        
        return filename
    
    def generate_documentation(self, api_module_path: str, typing_speed: float = 0.001):
        """
        Gera documenta√ß√£o autom√°tica para um m√≥dulo de API.
        
        Args:
            api_module_path: Caminho para o m√≥dulo de API
            typing_speed: Velocidade de simula√ß√£o de digita√ß√£o
        """
        module_name = os.path.basename(api_module_path)
        docs_dir = os.path.join(self.project_dir, "docs")
        os.makedirs(docs_dir, exist_ok=True)
        
        markdown_path = os.path.join(docs_dir, f"{os.path.splitext(module_name)[0]}.md")
        openapi_path = os.path.join(docs_dir, "openapi.json")
        
        print(f"\nüìö Gerando documenta√ß√£o autom√°tica a partir do c√≥digo...")
        print(f"üìù Arquivos de documenta√ß√£o:")
        print(f"   - Markdown: {markdown_path}")
        print(f"   - OpenAPI: {openapi_path}")
        
        # Ler o m√≥dulo de API
        with open(api_module_path, 'r') as f:
            code = f.read()
        
        # Simular extra√ß√£o de documenta√ß√£o
        print("üîç Analisando docstrings e anota√ß√µes de tipo...")
        time.sleep(1)
        print("üìä Extraindo par√¢metros e valores de retorno...")
        time.sleep(0.5)
        print("üß™ Detectando exemplos de c√≥digo...")
        time.sleep(0.5)
        print("‚ö†Ô∏è Identificando exce√ß√µes e tratamento de erros...")
        time.sleep(0.5)
        
        # Gerar Markdown
        markdown = f'''# API de Pagamentos

*Gerado automaticamente em: {self.timestamp}*
*Autores: {", ".join(self.presenter_names)}*

## Vis√£o Geral

Este m√≥dulo implementa um processador de pagamentos com valida√ß√£o avan√ßada e documenta√ß√£o integrada.

## Classes

### PaymentProcessor

Processador de pagamentos com valida√ß√£o avan√ßada e documenta√ß√£o autom√°tica.

Este processador implementa v√°rias formas de pagamento e gera documenta√ß√£o SOTA automaticamente para cada m√©todo.

#### Inicializa√ß√£o

```python
processor = PaymentProcessor(api_key="seu_api_key")
```

#### Par√¢metros do Construtor

| Par√¢metro   | Tipo  | Descri√ß√£o                                  | Padr√£o        |
|-------------|-------|--------------------------------------------| --------------|
| api_key     | str   | Chave de API para autentica√ß√£o             | Obrigat√≥rio   |
| environment | str   | Ambiente ('production', 'sandbox', 'test') | "production"  |

#### M√©todos

##### process_payment

Processa um pagamento usando o m√©todo especificado.

```python
result = processor.process_payment(
    amount=100.50,
    payment_method="credit_card",
    customer_id="cus_123456"
)
```

###### Par√¢metros

| Par√¢metro      | Tipo          | Descri√ß√£o                                      | Padr√£o      |
|----------------|---------------|------------------------------------------------|-------------|
| amount         | float         | Valor da transa√ß√£o                             | Obrigat√≥rio |
| payment_method | str           | M√©todo de pagamento ('credit_card', 'pix', 'boleto') | Obrigat√≥rio |
| customer_id    | str           | ID √∫nico do cliente                            | Obrigat√≥rio |
| currency       | str           | C√≥digo da moeda                                | "USD"       |
| metadata       | Dict[str, Any] | Dados adicionais para a transa√ß√£o             | None        |

###### Retorno

Um dicion√°rio com os detalhes da transa√ß√£o processada:

```python
{{
    "transaction_id": "tr_1234567890",
    "status": "success",
    "amount": 100.50,
    "currency": "USD",
    "payment_method": "credit_card",
    "customer_id": "cus_123456",
    "risk_score": 0.15,
    "processed_at": "2025-06-08T10:30:00Z",
    "metadata": {{"invoice_id": "inv_987"}}
}}
```

Para pagamentos PIX, a resposta inclui campos adicionais:
- `qr_code`: String base64 da imagem do QR code
- `expiration`: Timestamp ISO 8601 de expira√ß√£o (30 minutos)

Para boletos, a resposta inclui:
- `barcode`: C√≥digo de barras do boleto
- `pdf_url`: URL para download do PDF
- `expiration`: Timestamp ISO 8601 de expira√ß√£o (3 dias)

###### Exce√ß√µes

- `ValueError`: Se algum par√¢metro for inv√°lido
- `PaymentError`: Se o processamento falhar

##### refund_payment

Processa um reembolso para uma transa√ß√£o.

```python
refund = processor.refund_payment(
    transaction_id="tr_1234567890",
    amount=50.25,
    reason="partial_dissatisfaction"
)
```

###### Par√¢metros

| Par√¢metro      | Tipo   | Descri√ß√£o                           | Padr√£o              |
|----------------|--------|-------------------------------------|---------------------|
| transaction_id | str    | ID da transa√ß√£o original            | Obrigat√≥rio         |
| amount         | float  | Valor a reembolsar                  | None (valor total)  |
| reason         | str    | Motivo do reembolso                 | "customer_request"  |

###### Retorno

Um dicion√°rio com os detalhes do reembolso:

```python
{{
    "refund_id": "re_1234567890",
    "transaction_id": "tr_1234567890",
    "amount": 50.25,
    "currency": "USD",
    "reason": "partial_dissatisfaction",
    "status": "success",
    "processed_at": "2025-06-08T11:45:00Z"
}}
```

###### Exce√ß√µes

- `ValueError`: Se a transa√ß√£o n√£o for encontrada ou o valor for inv√°lido
- `RefundError`: Se o reembolso n√£o puder ser processado

## Exce√ß√µes

### PaymentError

Exce√ß√£o para erros de processamento de pagamento.

#### Atributos

- `message`: Descri√ß√£o do erro
- `code`: C√≥digo de erro
- `transaction_id`: ID da transa√ß√£o (se dispon√≠vel)

### RefundError

Exce√ß√£o para erros de processamento de reembolso.

#### Atributos

- `message`: Descri√ß√£o do erro
- `code`: C√≥digo de erro
- `transaction_id`: ID da transa√ß√£o original
- `refund_id`: ID do reembolso (se dispon√≠vel)

## Exemplos de Uso

### Processamento de Pagamento com Cart√£o de Cr√©dito

```python
processor = PaymentProcessor(api_key="sk_test_123456789")

try:
    payment = processor.process_payment(
        amount=100.50,
        payment_method="credit_card",
        customer_id="cus_123456",
        currency="USD",
        metadata={{"invoice_id": "inv_987"}}
    )
    print(f"Pagamento processado: {{payment['transaction_id']}}")
    
except (ValueError, PaymentError) as e:
    print(f"Erro: {{str(e)}}")
```

### Processamento de Reembolso

```python
try:
    refund = processor.refund_payment(
        transaction_id="tr_1234567890",
        amount=50.25,
        reason="partial_refund"
    )
    print(f"Reembolso processado: {{refund['refund_id']}}")
    
except (ValueError, RefundError) as e:
    print(f"Erro: {{str(e)}}")
```

## Notas de Implementa√ß√£o

- Todas as transa√ß√µes s√£o registradas no log de auditoria
- Os m√©todos s√£o thread-safe e podem ser chamados concorrentemente
- Nunca use chaves de produ√ß√£o em ambientes sandbox
'''
        
        # Simular gera√ß√£o do arquivo Markdown
        with open(markdown_path, 'w') as f:
            for char in markdown:
                f.write(char)
                f.flush()
                time.sleep(typing_speed)
                if random.random() < 0.01:
                    progress = round(markdown.index(char) / len(markdown) * 100)
                    print(f"üìù Gerando documenta√ß√£o Markdown: {progress}% conclu√≠do...", end="\r")
        
        # Simular gera√ß√£o do OpenAPI
        openapi = {
            "openapi": "3.0.3",
            "info": {
                "title": "API de Pagamentos",
                "description": "API para processamento de pagamentos e gest√£o de transa√ß√µes financeiras",
                "version": "1.0.0",
                "contact": {
                    "name": " & ".join(self.presenter_names),
                    "email": "contato@docs40.campus.party"
                }
            },
            "paths": {
                "/api/v1/payments": {
                    "post": {
                        "summary": "Processa um novo pagamento",
                        "description": "Processa um pagamento usando o m√©todo especificado.",
                        "requestBody": {
                            "required": True,
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/PaymentRequest"
                                    },
                                    "example": {
                                        "amount": 100.50,
                                        "payment_method": "credit_card",
                                        "customer_id": "cus_123456",
                                        "currency": "USD",
                                        "metadata": {"invoice_id": "inv_987"}
                                    }
                                }
                            }
                        },
                        "responses": {
                            "200": {
                                "description": "Pagamento processado com sucesso",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/PaymentResponse"
                                        }
                                    }
                                }
                            },
                            "400": {
                                "description": "Par√¢metros inv√°lidos",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        }
                                    }
                                }
                            },
                            "401": {
                                "description": "N√£o autorizado",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        }
                                    }
                                }
                            },
                            "422": {
                                "description": "Erro de processamento",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/api/v1/refunds": {
                    "post": {
                        "summary": "Processa um reembolso",
                        "description": "Processa um reembolso total ou parcial para uma transa√ß√£o.",
                        "requestBody": {
                            "required": True,
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/RefundRequest"
                                    },
                                    "example": {
                                        "transaction_id": "tr_1234567890",
                                        "amount": 50.25,
                                        "reason": "customer_request"
                                    }
                                }
                            }
                        },
                        "responses": {
                            "200": {
                                "description": "Reembolso processado com sucesso",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/RefundResponse"
                                        }
                                    }
                                }
                            },
                            "400": {
                                "description": "Par√¢metros inv√°lidos",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        }
                                    }
                                }
                            },
                            "404": {
                                "description": "Transa√ß√£o n√£o encontrada",
                                "content": {
                                    "application/json": {
                                        "schema": {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "components": {
                "schemas": {
                    "PaymentRequest": {
                        "type": "object",
                        "required": ["amount", "payment_method", "customer_id"],
                        "properties": {
                            "amount": {
                                "type": "number",
                                "format": "float",
                                "description": "Valor da transa√ß√£o"
                            },
                            "payment_method": {
                                "type": "string",
                                "description": "M√©todo de pagamento",
                                "enum": ["credit_card", "pix", "boleto"]
                            },
                            "customer_id": {
                                "type": "string",
                                "description": "ID √∫nico do cliente"
                            },
                            "currency": {
                                "type": "string",
                                "description": "C√≥digo da moeda",
                                "default": "USD"
                            },
                            "metadata": {
                                "type": "object",
                                "description": "Dados adicionais para a transa√ß√£o"
                            }
                        }
                    },
                    "PaymentResponse": {
                        "type": "object",
                        "properties": {
                            "transaction_id": {
                                "type": "string",
                                "description": "ID √∫nico da transa√ß√£o"
                            },
                            "status": {
                                "type": "string",
                                "description": "Status da transa√ß√£o",
                                "enum": ["success", "pending", "failed"]
                            },
                            "amount": {
                                "type": "number",
                                "format": "float",
                                "description": "Valor da transa√ß√£o"
                            },
                            "currency": {
                                "type": "string",
                                "description": "C√≥digo da moeda"
                            },
                            "payment_method": {
                                "type": "string",
                                "description": "M√©todo de pagamento usado"
                            },
                            "customer_id": {
                                "type": "string",
                                "description": "ID do cliente"
                            },
                            "risk_score": {
                                "type": "number",
                                "format": "float",
                                "description": "Score de risco da transa√ß√£o (0-1)"
                            },
                            "processed_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Data e hora do processamento"
                            },
                            "metadata": {
                                "type": "object",
                                "description": "Dados adicionais da transa√ß√£o"
                            },
                            "qr_code": {
                                "type": "string",
                                "description": "QR code para pagamento PIX (base64)"
                            },
                            "expiration": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Data e hora de expira√ß√£o"
                            },
                            "barcode": {
                                "type": "string",
                                "description": "C√≥digo de barras do boleto"
                            },
                            "pdf_url": {
                                "type": "string",
                                "format": "uri",
                                "description": "URL para download do PDF do boleto"
                            }
                        }
                    },
                    "RefundRequest": {
                        "type": "object",
                        "required": ["transaction_id"],
                        "properties": {
                            "transaction_id": {
                                "type": "string",
                                "description": "ID da transa√ß√£o original"
                            },
                            "amount": {
                                "type": "number",
                                "format": "float",
                                "description": "Valor a reembolsar (opcional para reembolso total)"
                            },
                            "reason": {
                                "type": "string",
                                "description": "Motivo do reembolso",
                                "default": "customer_request"
                            }
                        }
                    },
                    "RefundResponse": {
                        "type": "object",
                        "properties": {
                            "refund_id": {
                                "type": "string",
                                "description": "ID √∫nico do reembolso"
                            },
                            "transaction_id": {
                                "type": "string",
                                "description": "ID da transa√ß√£o original"
                            },
                            "amount": {
                                "type": "number",
                                "format": "float",
                                "description": "Valor reembolsado"
                            },
                            "currency": {
                                "type": "string",
                                "description": "C√≥digo da moeda"
                            },
                            "reason": {
                                "type": "string",
                                "description": "Motivo do reembolso"
                            },
                            "status": {
                                "type": "string",
                                "description": "Status do reembolso",
                                "enum": ["success", "pending", "failed"]
                            },
                            "processed_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Data e hora do processamento"
                            }
                        }
                    },
                    "ErrorResponse": {
                        "type": "object",
                        "properties": {
                            "error": {
                                "type": "object",
                                "properties": {
                                    "code": {
                                        "type": "string",
                                        "description": "C√≥digo de erro"
                                    },
                                    "message": {
                                        "type": "string",
                                        "description": "Mensagem de erro"
                                    },
                                    "transaction_id": {
                                        "type": "string",
                                        "description": "ID da transa√ß√£o (se dispon√≠vel)"
                                    },
                                    "refund_id": {
                                        "type": "string",
                                        "description": "ID do reembolso (se dispon√≠vel)"
                                    }
                                }
                            }
                        }
                    }
                },
                "securitySchemes": {
                    "bearerAuth": {
                        "type": "http",
                        "scheme": "bearer",
                        "bearerFormat": "JWT",
                        "description": "Token de autentica√ß√£o JWT"
                    }
                }
            },
            "security": [
                {
                    "bearerAuth": []
                }
            ]
        }
        
        with open(openapi_path, 'w') as f:
            json_str = json.dumps(openapi, indent=2)
            for char in json_str:
                f.write(char)
                f.flush()
                time.sleep(typing_speed / 5)  # OpenAPI √© mais r√°pido
                if random.random() < 0.005:
                    progress = round(json_str.index(char) / len(json_str) * 100)
                    print(f"üìù Gerando especifica√ß√£o OpenAPI: {progress}% conclu√≠do...", end="\r")
        
        print("\n‚úÖ Documenta√ß√£o gerada com sucesso!")
        print(f"üìä Estat√≠sticas:")
        print(f"   - Markdown: {len(markdown.splitlines())} linhas, {len(markdown)} caracteres")
        print(f"   - OpenAPI: {len(json.dumps(openapi, indent=2).splitlines())} linhas")
        print(f"   - Endpoints documentados: {len(openapi['paths'])}")
        print(f"   - Esquemas definidos: {len(openapi['components']['schemas'])}")
        
        return markdown_path, openapi_path
    
    def generate_live_tests(self, api_module_path: str, typing_speed: float = 0.001):
        """
        Gera testes automatizados para o m√≥dulo API.
        
        Args:
            api_module_path: Caminho para o m√≥dulo de API
            typing_speed: Velocidade de simula√ß√£o de digita√ß√£o
        """
        tests_dir = os.path.join(self.project_dir, "tests")
        os.makedirs(tests_dir, exist_ok=True)
        
        test_file = os.path.join(tests_dir, "test_api_module.py")
        
        print(f"\nüß™ Gerando testes automatizados a partir do c√≥digo...")
        print(f"üìù Arquivo de testes: {test_file}")
        
        # C√≥digo de teste
        test_code = f'''"""
Testes automatizados para API Module
Autores: {", ".join(self.presenter_names)}
Gerado em: {self.timestamp}

Testes gerados automaticamente a partir da documenta√ß√£o SOTA.
"""

import unittest
import sys
import os
import uuid
from unittest.mock import patch, MagicMock
from datetime import datetime

# Adicionar diret√≥rio pai ao path para importar o m√≥dulo
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from api_module import PaymentProcessor, PaymentError, RefundError


class TestPaymentProcessor(unittest.TestCase):
    """Testes para o processador de pagamentos."""
    
    def setUp(self):
        """Configura√ß√£o para cada teste."""
        self.api_key = "sk_test_" + uuid.uuid4().hex
        self.processor = PaymentProcessor(api_key=self.api_key, environment="test")
    
    def test_initialization(self):
        """Testa a inicializa√ß√£o do processador."""
        self.assertEqual(self.processor.api_key, self.api_key)
        self.assertEqual(self.processor.environment, "test")
        self.assertEqual(len(self.processor.transaction_log), 0)
    
    def test_initialization_invalid_environment(self):
        """Testa a inicializa√ß√£o com ambiente inv√°lido."""
        with self.assertRaises(ValueError) as context:
            PaymentProcessor(api_key=self.api_key, environment="invalid")
        self.assertIn("Ambiente 'invalid' n√£o suportado", str(context.exception))
    
    def test_initialization_invalid_api_key(self):
        """Testa a inicializa√ß√£o com API key inv√°lida."""
        with self.assertRaises(ValueError) as context:
            PaymentProcessor(api_key="", environment="test")
        self.assertEqual("API key inv√°lida", str(context.exception))
    
    def test_process_payment_credit_card(self):
        """Testa o processamento de pagamento com cart√£o de cr√©dito."""
        payment = self.processor.process_payment(
            amount=100.50,
            payment_method="credit_card",
            customer_id="cus_" + uuid.uuid4().hex,
            currency="USD"
        )
        
        self.assertIsNotNone(payment["transaction_id"])
        self.assertEqual(payment["status"], "success")
        self.assertEqual(payment["amount"], 100.50)
        self.assertEqual(payment["currency"], "USD")
        self.assertEqual(payment["payment_method"], "credit_card")
        self.assertIsNotNone(payment["processed_at"])
        self.assertIsNotNone(payment["risk_score"])
        self.assertIn(payment, self.processor.transaction_log)
    
    def test_process_payment_pix(self):
        """Testa o processamento de pagamento com PIX."""
        payment = self.processor.process_payment(
            amount=150.75,
            payment_method="pix",
            customer_id="cus_" + uuid.uuid4().hex,
            currency="BRL"
        )
        
        self.assertIsNotNone(payment["transaction_id"])
        self.assertEqual(payment["status"], "success")
        self.assertEqual(payment["amount"], 150.75)
        self.assertEqual(payment["currency"], "BRL")
        self.assertEqual(payment["payment_method"], "pix")
        self.assertIsNotNone(payment["qr_code"])
        self.assertIsNotNone(payment["expiration"])
    
    def test_process_payment_boleto(self):
        """Testa o processamento de pagamento com boleto."""
        payment = self.processor.process_payment(
            amount=200.00,
            payment_method="boleto",
            customer_id="cus_" + uuid.uuid4().hex,
            currency="BRL"
        )
        
        self.assertIsNotNone(payment["transaction_id"])
        self.assertEqual(payment["status"], "success")
        self.assertEqual(payment["amount"], 200.00)
        self.assertEqual(payment["currency"], "BRL")
        self.assertEqual(payment["payment_method"], "boleto")
        self.assertIsNotNone(payment["barcode"])
        self.assertIsNotNone(payment["pdf_url"])
        self.assertIsNotNone(payment["expiration"])
    
    def test_process_payment_invalid_amount(self):
        """Testa o processamento com valor inv√°lido."""
        with self.assertRaises(ValueError) as context:
            self.processor.process_payment(
                amount=0,
                payment_method="credit_card",
                customer_id="cus_123456"
            )
        self.assertEqual("O valor deve ser maior que zero", str(context.exception))
    
    def test_process_payment_invalid_customer(self):
        """Testa o processamento com cliente inv√°lido."""
        with self.assertRaises(ValueError) as context:
            self.processor.process_payment(
                amount=100.50,
                payment_method="credit_card",
                customer_id=""
            )
        self.assertEqual("ID do cliente √© obrigat√≥rio", str(context.exception))
    
    def test_refund_payment_full(self):
        """Testa o reembolso total de um pagamento."""
        # Primeiro, processar um pagamento
        payment = self.processor.process_payment(
            amount=300.00,
            payment_method="credit_card",
            customer_id="cus_" + uuid.uuid4().hex
        )
        
        # Depois, reembolsar o pagamento
        refund = self.processor.refund_payment(
            transaction_id=payment["transaction_id"]
        )
        
        self.assertIsNotNone(refund["refund_id"])
        self.assertEqual(refund["transaction_id"], payment["transaction_id"])
        self.assertEqual(refund["amount"], payment["amount"])
        self.assertEqual(refund["currency"], payment["currency"])
        self.assertEqual(refund["status"], "success")
        self.assertEqual(refund["reason"], "customer_request")
    
    def test_refund_payment_partial(self):
        """Testa o reembolso parcial de um pagamento."""
        # Primeiro, processar um pagamento
        payment = self.processor.process_payment(
            amount=300.00,
            payment_method="credit_card",
            customer_id="cus_" + uuid.uuid4().hex
        )
        
        # Depois, reembolsar parcialmente o pagamento
        refund_amount = 150.00
        refund = self.processor.refund_payment(
            transaction_id=payment["transaction_id"],
            amount=refund_amount,
            reason="partial_refund"
        )
        
        self.assertIsNotNone(refund["refund_id"])
        self.assertEqual(refund["transaction_id"], payment["transaction_id"])
        self.assertEqual(refund["amount"], refund_amount)
        self.assertEqual(refund["currency"], payment["currency"])
        self.assertEqual(refund["status"], "success")
        self.assertEqual(refund["reason"], "partial_refund")
    
    def test_refund_payment_invalid_transaction(self):
        """Testa o reembolso com transa√ß√£o inv√°lida."""
        with self.assertRaises(ValueError) as context:
            self.processor.refund_payment(
                transaction_id="invalid_transaction"
            )
        self.assertIn("Transa√ß√£o invalid_transaction n√£o encontrada", str(context.exception))
    
    def test_refund_payment_invalid_amount(self):
        """Testa o reembolso com valor inv√°lido."""
        # Primeiro, processar um pagamento
        payment = self.processor.process_payment(
            amount=300.00,
            payment_method="credit_card",
            customer_id="cus_" + uuid.uuid4().hex
        )
        
        # Tentar reembolsar com valor maior que o original
        with self.assertRaises(ValueError) as context:
            self.processor.refund_payment(
                transaction_id=payment["transaction_id"],
                amount=400.00
            )
        self.assertEqual("Valor de reembolso inv√°lido", str(context.exception))
        
        # Tentar reembolsar com valor zero
        with self.assertRaises(ValueError) as context:
            self.processor.refund_payment(
                transaction_id=payment["transaction_id"],
                amount=0
            )
        self.assertEqual("Valor de reembolso inv√°lido", str(context.exception))
    
    def test_calculate_risk_score(self):
        """Testa o c√°lculo de score de risco."""
        risk = self.processor._calculate_risk_score(100, "credit_card", "cus_123456")
        self.assertGreaterEqual(risk, 0.0)
        self.assertLessEqual(risk, 1.0)
        
        # Valor alto deve aumentar o risco
        high_amount_risk = self.processor._calculate_risk_score(2000, "credit_card", "cus_123456")
        self.assertGreater(high_amount_risk, risk)


if __name__ == '__main__':
    unittest.main()
'''
        
        # Simular gera√ß√£o do arquivo de testes
        with open(test_file, 'w') as f:
            for char in test_code:
                f.write(char)
                f.flush()
                time.sleep(typing_speed)
                if random.random() < 0.01:
                    progress = round(test_code.index(char) / len(test_code) * 100)
                    print(f"üß™ Gerando testes automatizados: {progress}% conclu√≠do...", end="\r")
        
        print("\n‚úÖ Testes automatizados gerados com sucesso!")
        print(f"üìä Estat√≠sticas:")
        print(f"   - {len(test_code.splitlines())} linhas de c√≥digo de teste")
        print(f"   - {test_code.count('def test_')} m√©todos de teste")
        print(f"   - {test_code.count('self.assert')} asser√ß√µes")
        
        return test_file
    
    def run_demo(self, typing_speed: float = 0.001):
        """
        Executa a demonstra√ß√£o completa.
        
        Args:
            typing_speed: Velocidade de simula√ß√£o de digita√ß√£o
        """
        print(f"\nüöÄ Iniciando demonstra√ß√£o de SOTA Code Generator...")
        
        # Gerar m√≥dulo API
        api_module_path = self.generate_api_module(typing_speed=typing_speed)
        
        # Gerar documenta√ß√£o
        markdown_path, openapi_path = self.generate_documentation(api_module_path, typing_speed=typing_speed)
        
        # Gerar testes
        test_file = self.generate_live_tests(api_module_path, typing_speed=typing_speed)
        
        # Resumo
        print(f"\n‚ú® Demonstra√ß√£o conclu√≠da com sucesso!")
        print(f"\nüìÅ Arquivos gerados:")
        print(f"   - C√≥digo: {api_module_path}")
        print(f"   - Documenta√ß√£o Markdown: {markdown_path}")
        print(f"   - Especifica√ß√£o OpenAPI: {openapi_path}")
        print(f"   - Testes automatizados: {test_file}")
        
        return {
            "api_module": api_module_path,
            "markdown_doc": markdown_path,
            "openapi_spec": openapi_path,
            "tests": test_file
        }


def main():
    parser = argparse.ArgumentParser(description="Documenta√ß√£o 4.0 - SOTA Live Code Generator")
    parser.add_argument("--project-dir", type=str, default="./demo-project", 
                      help="Diret√≥rio onde os arquivos ser√£o gerados")
    parser.add_argument("--speed", type=float, default=0.0005, 
                      help="Velocidade de simula√ß√£o de digita√ß√£o (segundos por caractere)")
    parser.add_argument("--presenters", type=str, default="Lucas D√≥rea Cardoso,Aulus Diniz", 
                      help="Nomes dos apresentadores separados por v√≠rgula")
    
    args = parser.parse_args()
    
    # Criar diret√≥rio do projeto se n√£o existir
    if not os.path.exists(args.project_dir):
        os.makedirs(args.project_dir)
    
    # Inicializar gerador
    generator = LiveCodeGenerator(
        project_dir=args.project_dir,
        presenter_names=args.presenters.split(",")
    )
    
    # Executar demonstra√ß√£o
    generator.run_demo(typing_speed=args.speed)


if __name__ == "__main__":
    main()