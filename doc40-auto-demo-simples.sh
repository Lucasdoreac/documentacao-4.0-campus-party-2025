#!/bin/bash
# Script de Demonstra√ß√£o Autom√°tica - Documenta√ß√£o 4.0 com Claude Code
# Campus Party 2025 - Lucas D√≥rea Cardoso e Aulus Diniz

# Definir cores para melhor visualiza√ß√£o
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Fun√ß√£o para exibir cabe√ßalho
mostrar_cabecalho() {
    # Abrir a apresenta√ß√£o HTML
    echo "Abrindo apresenta√ß√£o de slides..."
    open_presentation
    sleep 1

    clear
    echo -e "${BLUE}${BOLD}"
    echo "============================================================"
    echo "    üöÄ DEMONSTRA√á√ÉO AUTOM√ÅTICA - DOCUMENTA√á√ÉO 4.0"
    echo "    Campus Party 2025 - Lucas D√≥rea Cardoso e Aulus Diniz"
    echo "============================================================"
    echo -e "${NC}"
    echo "Esta demonstra√ß√£o mostrar√° como funciona um sistema completo"
    echo "de Documenta√ß√£o 4.0 usando Claude Code e t√©cnicas de IA."
    echo ""
    echo "A demonstra√ß√£o √© totalmente autom√°tica. Sente-se e aproveite!"
    echo "A apresenta√ß√£o foi aberta no seu navegador."
    echo ""
    echo -e "${YELLOW}A demonstra√ß√£o come√ßar√° em 5 segundos...${NC}"
    sleep 5
}

# Caminho base
BASE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
DEMO_PROJECT_DIR="$BASE_DIR/demo-project"

# Abrir apresenta√ß√£o HTML
open_presentation() {
    if [ "$(uname)" == "Darwin" ]; then
        # macOS
        open "$BASE_DIR/doc40-slides-atualizados.html"
    elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
        # Linux
        if command -v xdg-open > /dev/null; then
            xdg-open "$BASE_DIR/doc40-slides-atualizados.html"
        elif command -v firefox > /dev/null; then
            firefox "$BASE_DIR/doc40-slides-atualizados.html"
        elif command -v google-chrome > /dev/null; then
            google-chrome "$BASE_DIR/doc40-slides-atualizados.html"
        else
            echo "N√£o foi poss√≠vel abrir o navegador automaticamente."
            echo "Por favor, abra manualmente o arquivo: $BASE_DIR/doc40-slides-atualizados.html"
        fi
    elif [ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ] || [ "$(expr substr $(uname -s) 1 10)" == "MINGW64_NT" ]; then
        # Windows
        start "$BASE_DIR/doc40-slides-atualizados.html"
    else
        echo "N√£o foi poss√≠vel detectar o sistema operacional."
        echo "Por favor, abra manualmente o arquivo: $BASE_DIR/doc40-slides-atualizados.html"
    fi
}

# Fun√ß√£o para simular digita√ß√£o
simular_digitacao() {
    local texto="$1"
    local velocidade=${2:-0.03}
    
    for (( i=0; i<${#texto}; i++ )); do
        echo -n "${texto:$i:1}"
        sleep $velocidade
    done
    echo ""
}

# Fun√ß√£o para mostrar t√≠tulo de se√ß√£o
mostrar_secao() {
    local titulo="$1"
    echo ""
    echo -e "${BLUE}${BOLD}## $titulo ##${NC}"
    echo -e "${BLUE}${BOLD}$(printf '=%.0s' $(seq 1 $((${#titulo} + 6))))${NC}"
    echo ""
}

# Fun√ß√£o para simular comando e resultado
simular_comando() {
    local comando="$1"
    local resultado="$2"
    local tempo_espera=${3:-1}
    
    echo -e "${YELLOW}$> ${GREEN}${comando}${NC}"
    sleep $tempo_espera
    echo -e "$resultado"
    sleep 1
}

# Fun√ß√£o para limpar a tela e esperar
limpar_e_esperar() {
    local tempo=${1:-3}
    sleep $tempo
    clear
}

# Fun√ß√£o para demo de consulta de documenta√ß√£o
demo_consulta() {
    mostrar_secao "DEMO 1: CONSULTA √Ä DOCUMENTA√á√ÉO"
    
    simular_digitacao "Primeiro, vamos ver como consultar documenta√ß√£o usando busca ag√™ntica."
    simular_digitacao "A busca ag√™ntica permite fazer perguntas em linguagem natural sobre o c√≥digo."
    echo ""
    
    # Simular uma consulta
    simular_digitacao "Vamos perguntar: Como funciona o sistema de autentica√ß√£o?" 0.05
    sleep 1
    
    # Simular execu√ß√£o do comando
    simular_comando "claude-code query --directory $DEMO_PROJECT_DIR --query \"Como funciona a autentica√ß√£o neste sistema?\"" "
üîç Explorando o reposit√≥rio...
üìÇ Analisando arquivos relevantes...
üí° Processando informa√ß√µes...

ü§ñ RESPOSTA:
O sistema de autentica√ß√£o usa tokens JWT para autenticar usu√°rios. O fluxo funciona da seguinte forma:

1. O usu√°rio fornece suas credenciais atrav√©s da fun√ß√£o 'authenticate' em auth.py
2. A fun√ß√£o verifica se a API key tem pelo menos 10 caracteres
3. Se v√°lida, gera um token no formato 'Bearer {api_key[:5]}...{api_key[-5:]}'
4. Este token deve ser inclu√≠do em todas as requisi√ß√µes subsequentes
5. O token √© verificado antes de permitir acesso √†s opera√ß√µes protegidas

Para uma API key como 'abcdefghijklmnopqrst', o token gerado seria 'Bearer abcde...pqrst'.

FONTES:
- src/api/auth.py (relev√¢ncia: 0.95)
- api_module.py (relev√¢ncia: 0.82)
"
    
    simular_digitacao "O sistema encontrou as informa√ß√µes relevantes na base de c√≥digo!" 0.03
    simular_digitacao "Note como ele explorou o reposit√≥rio e forneceu detalhes precisos." 0.03
    simular_digitacao "Agora, vamos fazer outra pergunta..." 0.03
    sleep 1
    
    # Simular outra consulta
    simular_digitacao "Vamos perguntar: Como fa√ßo para processar um pagamento?" 0.05
    sleep 1
    
    # Simular execu√ß√£o do segundo comando
    simular_comando "claude-code query --directory $DEMO_PROJECT_DIR --query \"Como fa√ßo para processar um pagamento?\"" "
üîç Explorando o reposit√≥rio...
üìÇ Analisando arquivos relevantes...
üí° Processando informa√ß√µes...

ü§ñ RESPOSTA:
Para processar um pagamento, voc√™ deve usar a classe PaymentProcessor da seguinte forma:

1. Primeiro, inicialize o processador com sua API key:
   processor = PaymentProcessor(api_key=\"sua_api_key\")

2. Em seguida, chame o m√©todo process_payment com os par√¢metros necess√°rios:
   result = processor.process_payment(
       amount=100.50,             # Valor da transa√ß√£o (obrigat√≥rio)
       payment_method=\"credit_card\", # M√©todo de pagamento (obrigat√≥rio)
       customer_id=\"cus_123456\",     # ID do cliente (obrigat√≥rio)
       currency=\"USD\",              # Moeda (opcional, padr√£o: USD)
       metadata={\"invoice_id\": \"inv_987\"} # Dados adicionais (opcional)
   )

3. O resultado ser√° um dicion√°rio com os detalhes da transa√ß√£o:
   {
       \"transaction_id\": \"tr_123456\",
       \"status\": \"success\",
       \"amount\": 100.50,
       \"currency\": \"USD\",
       \"risk_score\": 0.15,
       ...
   }

Para pagamentos com PIX, use payment_method=\"pix\" e voc√™ receber√° um QR code na resposta.

FONTES:
- src/api/payment_processor.py (relev√¢ncia: 0.98)
- api_module.py (relev√¢ncia: 0.94)
"
    
    simular_digitacao "Impressionante! O sistema n√£o s√≥ encontrou como processar um pagamento," 0.03
    simular_digitacao "mas tamb√©m forneceu exemplos de c√≥digo prontos para uso!" 0.03
    simular_digitacao "Isso economiza muito tempo de desenvolvimento e consulta √† documenta√ß√£o." 0.03
    
    limpar_e_esperar 4
}

# Fun√ß√£o para demo de gera√ß√£o de documenta√ß√£o
demo_geracao() {
    mostrar_secao "DEMO 2: GERA√á√ÉO DE DOCUMENTA√á√ÉO"
    
    simular_digitacao "Agora, vamos ver como gerar documenta√ß√£o automaticamente a partir do c√≥digo."
    simular_digitacao "Este processo analisa o c√≥digo-fonte e gera documenta√ß√£o completa e estruturada."
    echo ""
    
    # Simular gera√ß√£o de documenta√ß√£o
    simular_digitacao "Vamos gerar documenta√ß√£o para nosso projeto de demonstra√ß√£o:" 0.05
    sleep 1
    
    # Simular execu√ß√£o do comando
    simular_comando "claude-code document --directory $DEMO_PROJECT_DIR --format markdown --output-dir $DEMO_PROJECT_DIR/docs" "
üìù Analisando o c√≥digo-fonte...
üîç Extraindo classes e m√©todos...
üìä Identificando par√¢metros e tipos de retorno...
üìö Gerando exemplos de uso...
üß™ Verificando e validando exemplos...
üìÑ Formatando documenta√ß√£o em markdown...

‚úÖ Documenta√ß√£o gerada com sucesso em $DEMO_PROJECT_DIR/docs/api_module.md!
"
    
    # Mostrar exemplo de documenta√ß√£o gerada
    simular_digitacao "Vamos ver um trecho da documenta√ß√£o gerada:" 0.03
    sleep 1
    
    simular_comando "head -n 30 $DEMO_PROJECT_DIR/docs/api_module.md" "
# API de Pagamentos - Documenta√ß√£o

*Gerado automaticamente em: $(date +"%Y-%m-%d %H:%M:%S")*
*Autores: Lucas D√≥rea Cardoso, Aulus Diniz*

## Vis√£o Geral

Este m√≥dulo implementa um processador de pagamentos com valida√ß√£o avan√ßada e documenta√ß√£o integrada.

## Classes

### PaymentProcessor

Processador de pagamentos com valida√ß√£o avan√ßada e documenta√ß√£o autom√°tica.

Este processador implementa v√°rias formas de pagamento e gera documenta√ß√£o SOTA automaticamente para cada m√©todo.

#### Inicializa√ß√£o

processor = PaymentProcessor(api_key=\"seu_api_key\")

#### Par√¢metros do Construtor

| Par√¢metro   | Tipo  | Descri√ß√£o                                  | Padr√£o        |
|-------------|-------|--------------------------------------------| --------------|
| api_key     | str   | Chave de API para autentica√ß√£o             | Obrigat√≥rio   |
| environment | str   | Ambiente ('production', 'sandbox', 'test') | \"production\"  |
"
    
    simular_digitacao "A documenta√ß√£o inclui tudo: par√¢metros, tipos, exemplos, e muito mais!" 0.03
    simular_digitacao "Tudo isso foi gerado automaticamente a partir do c√≥digo-fonte." 0.03
    
    # Mostrar gera√ß√£o de documenta√ß√£o de API
    simular_digitacao "Tamb√©m podemos gerar documenta√ß√£o espec√≠fica para APIs:" 0.03
    sleep 1
    
    simular_comando "claude-code document-api --directory $DEMO_PROJECT_DIR --format openapi --output-dir $DEMO_PROJECT_DIR/docs/api" "
üìù Analisando APIs e endpoints...
üîç Extraindo par√¢metros e respostas...
üìä Detectando esquemas e tipos de dados...
üìö Criando especifica√ß√£o OpenAPI...
üß™ Validando especifica√ß√£o...
üìÑ Salvando documenta√ß√£o...

‚úÖ Documenta√ß√£o de API gerada com sucesso!
‚úÖ Arquivo OpenAPI: $DEMO_PROJECT_DIR/docs/api/openapi.json
"
    
    simular_digitacao "A especifica√ß√£o OpenAPI pode ser usada em ferramentas como Swagger UI," 0.03
    simular_digitacao "permitindo que desenvolvedores testem e explorem sua API facilmente!" 0.03
    
    limpar_e_esperar 4
}

# Fun√ß√£o para demo de agente de manuten√ß√£o
demo_agente() {
    mostrar_secao "DEMO 3: AGENTE DE MANUTEN√á√ÉO DE DOCUMENTA√á√ÉO"
    
    simular_digitacao "Vamos ver como o agente de manuten√ß√£o de documenta√ß√£o funciona."
    simular_digitacao "Este agente monitora mudan√ßas no c√≥digo e atualiza a documenta√ß√£o automaticamente."
    echo ""
    
    # Simular detec√ß√£o de mudan√ßas
    simular_digitacao "Simulando uma mudan√ßa no c√≥digo (adi√ß√£o de um novo par√¢metro):" 0.05
    sleep 1
    
    # Simular commit
    simular_comando "git commit -m \"feat: Adicionar par√¢metro timeout ao processo de pagamento\"" "
[main a1b2c3d] feat: Adicionar par√¢metro timeout ao processo de pagamento
 1 file changed, 5 insertions(+), 1 deletion(-)
"
    
    # Simular detec√ß√£o pelo agente
    simular_digitacao "O agente de manuten√ß√£o detectou a mudan√ßa e est√° atualizando a documenta√ß√£o:" 0.03
    sleep 1
    
    simular_comando "claude-code update-docs --directory $DEMO_PROJECT_DIR --commit a1b2c3d" "
üîç Analisando altera√ß√µes no commit a1b2c3d...
üìÇ Verificando arquivos modificados...
üìù Identificando altera√ß√µes na API...
üîÑ Atualizando documenta√ß√£o afetada...

Altera√ß√µes detectadas:
- Adicionado par√¢metro 'timeout' ao m√©todo 'process_payment'
- Atualizada descri√ß√£o do par√¢metro
- Adicionado exemplo de uso com timeout

‚úÖ Documenta√ß√£o atualizada com sucesso!
‚úÖ Arquivos atualizados:
   - $DEMO_PROJECT_DIR/docs/api_module.md
   - $DEMO_PROJECT_DIR/docs/api/openapi.json
"
    
    # Mostrar trechos da documenta√ß√£o atualizada
    simular_digitacao "Vamos ver como a documenta√ß√£o foi atualizada automaticamente:" 0.03
    sleep 1
    
    simular_comando "grep -A 5 timeout $DEMO_PROJECT_DIR/docs/api_module.md" "
| timeout       | float  | Tempo limite em segundos para a transa√ß√£o | 30.0         |

#### Exemplo com timeout personalizado

result = processor.process_payment(
    amount=100.50,
"
    
    simular_digitacao "A documenta√ß√£o foi atualizada automaticamente!" 0.03
    simular_digitacao "O agente detectou a adi√ß√£o do par√¢metro timeout e atualizou toda a documenta√ß√£o," 0.03
    simular_digitacao "incluindo tabelas de par√¢metros, exemplos, e especifica√ß√£o OpenAPI." 0.03
    
    limpar_e_esperar 4
}

# Fun√ß√£o para demo de gera√ß√£o de c√≥digo com documenta√ß√£o
demo_geracao_codigo() {
    mostrar_secao "DEMO 4: GERA√á√ÉO DE C√ìDIGO COM DOCUMENTA√á√ÉO INTEGRADA"
    
    simular_digitacao "Por fim, vamos ver como gerar c√≥digo com documenta√ß√£o SOTA integrada."
    simular_digitacao "Este √© o auge da Documenta√ß√£o 4.0: c√≥digo e documenta√ß√£o nascem juntos!"
    echo ""
    
    # Simular gera√ß√£o de c√≥digo
    simular_digitacao "Vamos gerar um novo m√≥dulo para processamento de reembolsos:" 0.05
    sleep 1
    
    # Simular execu√ß√£o do comando
    simular_comando "claude-code generate --prompt \"Crie um m√≥dulo Python para processamento de reembolsos com documenta√ß√£o SOTA integrada\" --output $DEMO_PROJECT_DIR/src/api/refunds.py" "
üß† Pensando...
üìù Gerando c√≥digo com documenta√ß√£o integrada...
‚öôÔ∏è Otimizando estrutura e padr√µes...
üìö Incorporando melhores pr√°ticas de documenta√ß√£o...
‚úÖ Adicionando docstrings completos...
üß™ Incluindo exemplos test√°veis...

‚úÖ C√≥digo gerado com sucesso em $DEMO_PROJECT_DIR/src/api/refunds.py!
"
    
    # Mostrar trecho do c√≥digo gerado
    simular_digitacao "Vamos ver um trecho do c√≥digo gerado:" 0.03
    sleep 1
    
    simular_comando "head -n 40 $DEMO_PROJECT_DIR/src/api/refunds.py" "
\"\"\"
M√≥dulo de Processamento de Reembolsos

Este m√≥dulo implementa um sistema completo para processamento de reembolsos
relacionados a transa√ß√µes de pagamento. Suporta reembolsos totais e parciais,
com valida√ß√£o e rastreamento completo.

Autores: Lucas D√≥rea Cardoso, Aulus Diniz
Data: $(date +\"%Y-%m-%d\")
\"\"\"

import datetime
import uuid
from typing import Dict, Any, Optional, List, Union, Tuple

class RefundProcessor:
    \"\"\"
    Processador de reembolsos com documenta√ß√£o SOTA integrada.
    
    Esta classe gerencia todas as opera√ß√µes relacionadas a reembolsos,
    incluindo valida√ß√£o, processamento e gera√ß√£o de comprovantes.
    
    Exemplos:
        # Inicializar o processador
        refund_processor = RefundProcessor(api_key=\"sk_test_123456\")
        
        # Processar um reembolso total
        result = refund_processor.process_refund(
            transaction_id=\"tr_123456\"
        )
        
        # Processar um reembolso parcial
        result = refund_processor.process_refund(
            transaction_id=\"tr_123456\",
            amount=50.25,
            reason=\"partial_dissatisfaction\"
        )
    \"\"\"
"
    
    simular_digitacao "O c√≥digo gerado j√° vem com documenta√ß√£o completa integrada!" 0.03
    simular_digitacao "Docstrings, exemplos, tipos, tudo seguindo as melhores pr√°ticas." 0.03
    simular_digitacao "Isso garante que a documenta√ß√£o nas√ßa junto com o c√≥digo, sempre atualizada." 0.03
    
    limpar_e_esperar 4
}

# Fun√ß√£o para mostrar resumo e conclus√£o
mostrar_conclusao() {
    mostrar_secao "CONCLUS√ÉO: DOCUMENTA√á√ÉO 4.0 COM CLAUDE CODE"
    
    simular_digitacao "Vimos como a Documenta√ß√£o 4.0 com Claude Code transforma completamente"
    simular_digitacao "a forma como criamos e mantemos documenta√ß√£o t√©cnica:"
    echo ""
    
    sleep 1
    echo -e "${GREEN}‚úÖ Busca Ag√™ntica${NC}: Consultas em linguagem natural sobre o c√≥digo"
    sleep 0.5
    echo -e "${GREEN}‚úÖ Gera√ß√£o Autom√°tica${NC}: Documenta√ß√£o completa gerada a partir do c√≥digo"
    sleep 0.5
    echo -e "${GREEN}‚úÖ Manuten√ß√£o Autom√°tica${NC}: Atualiza√ß√£o da documenta√ß√£o ao mudar o c√≥digo"
    sleep 0.5
    echo -e "${GREEN}‚úÖ Gera√ß√£o de C√≥digo${NC}: C√≥digo e documenta√ß√£o nascem juntos"
    sleep 0.5
    echo -e "${GREEN}‚úÖ Integra√ß√£o Cont√≠nua${NC}: Tudo integrado ao fluxo de desenvolvimento"
    echo ""
    
    sleep 1
    simular_digitacao "A Documenta√ß√£o 4.0 transforma documenta√ß√£o de um fardo em um ativo estrat√©gico"
    simular_digitacao "que evolui automaticamente com seu c√≥digo."
    echo ""
    
    sleep 1
    echo -e "${BLUE}Para saber mais:${NC}"
    echo -e "1. Consulte o guia pr√°tico: ${YELLOW}doc40-guia-pratico.md${NC}"
    echo -e "2. Veja a apresenta√ß√£o completa: ${YELLOW}doc40-slides-atualizados.html${NC}"
    echo -e "3. Explore os scripts de exemplo: ${YELLOW}doc40-*.py${NC}"
    echo ""
    
    sleep 1
    echo -e "${BLUE}${BOLD}OBRIGADO POR ASSISTIR √Ä DEMONSTRA√á√ÉO!${NC}"
    echo -e "${BLUE}Campus Party 2025 - Lucas D√≥rea Cardoso e Aulus Diniz${NC}"
}

# Execu√ß√£o principal
mostrar_cabecalho
demo_consulta
demo_geracao
demo_agente
demo_geracao_codigo
mostrar_conclusao